%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Logo_Uni_Luebeck_BW.pdf
%%Creator: Adobe Acrobat 21.5.0
%%For: deinzer
%%CreationDate: 29.07.2021, 10:11:15
%%BoundingBox: 0 0 284 114
%%HiResBoundingBox: 0 0 283.4650 113.3860
%%CropBox: 0 0 283.4650 113.3860
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 518 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-02-21T15:00+01:00"
   pdf:Producer="cairo 1.16.0 (https://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -113.386 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 113.386 li
283.465 113.386 li
283.465 0 li
cp
clp
81.852 52.414 mo
81.594 52.414 80.043 53.242 79.793 53.457 cv
78.574 52.145 79.41 52.535 78.289 52.828 cv
77.785 52.277 77.281 51.719 76.773 51.176 cv
76.656 51.215 76.543 51.262 76.434 51.305 cv
76.48 51.59 77.453 53.574 77.281 53.727 cv
76.664 53.371 76.062 53.02 75.457 52.664 cv
75.359 50.516 77.555 50.312 78.453 48.863 cv
78.41 48.793 78.375 48.73 78.344 48.676 cv
75.371 48.203 71.895 47.281 69.238 48.84 cv
69.117 49.547 68.02 52.828 67.637 52.828 cv
67.363 52.723 67.09 52.617 66.824 52.523 cv
66.879 52.34 67.418 52.375 67.582 52.371 cv
67.297 51.215 67.23 50.82 66.344 50.164 cv
64.883 48.426 64.016 46.504 62.961 44.59 cv
62.152 43.223 60.891 41.875 60.504 40.555 cv
60.363 40.504 60.23 40.457 60.098 40.422 cv
60.047 40.211 60 40.008 59.957 39.809 cv
59.594 37.637 58.145 36.504 59.594 34.426 cv
59.52 33.953 59.449 33.492 59.387 33.031 cv
58.871 32.715 58.906 32.738 58.73 32.242 cv
59.199 31.863 59.727 32.441 60.133 32.832 cv
64.113 33.363 61.527 28.312 59.32 30.941 cv
58.059 30.398 59.727 29.242 59.465 27.793 cv
58.52 27.473 57.773 27.129 56.973 27.73 cv
56.195 28.938 57.488 29.633 57.41 30.922 cv
56.402 31.016 55.688 29.266 54.363 30.414 cv
53.102 34.602 56.02 31.91 57.555 32.184 cv
57.676 33.129 55.809 33.164 57.305 35.086 cv
55.062 35.688 52.727 35.758 50.5 36.102 cv
50.422 36.352 50.348 36.598 50.27 36.855 cv
50.367 36.918 50.469 36.973 50.578 37.031 cv
50.566 37.316 50.469 37.648 50.5 38.039 cv
50.797 38.18 li
50.598 38.617 50.215 38.477 50.773 39.074 cv
52.203 39.289 54.621 38.617 56.215 38.453 cv
56.215 41.141 48.922 46.512 51.367 48.332 cv
51.828 47.789 52.172 47 52.305 46.809 cv
52.539 46.473 54.34 43.691 54.637 43.375 cv
54.703 43.398 54.77 43.422 54.848 43.457 cv
55.141 44.41 53.691 47.941 53.316 49.219 cv
53.145 50.328 53.09 51.566 52.5 52.605 cv
52.031 52.27 52.699 52.027 51.895 51.801 cv
52.332 50.766 51.84 51.059 52.793 50.305 cv
52.707 48.828 50.852 48.215 49.906 47.684 cv
49.984 45.992 49.262 45.863 48.188 46.586 cv
48.297 46.668 48.406 46.762 48.523 46.855 cv
48.523 47.176 li
47.68 47.777 46.77 48.414 45.945 48.945 cv
45.148 48.426 46.625 45.25 46.812 44.531 cv
46.727 41.84 46.824 39.773 44.246 39.43 cv
44.039 39.832 44.445 41.496 44.512 42.156 cv
43.422 43.48 42.238 44.32 43.336 45.91 cv
43.492 47.398 43.809 47.598 45.234 47.977 cv
45.234 48.059 45.246 48.156 45.254 48.25 cv
43.949 48.25 li
43.949 48.379 43.949 48.52 43.961 48.664 cv
44.203 48.793 44.992 48.629 45.367 48.59 cv
45.367 48.676 45.367 48.77 45.375 48.863 cv
45.078 49.016 44.27 48.934 43.906 49.016 cv
43.863 49.785 43.785 50.527 43.633 51.281 cv
43.457 51.578 42.469 53.23 42.285 53.027 cv
43.152 51.281 43.719 49.785 41.648 51.746 cv
40.43 52.285 40.715 50.785 39.555 52.594 cv
38.719 51.945 38.75 51.859 37.918 51.898 cv
37.82 51.777 37.723 51.664 37.633 51.543 cv
37.336 51.531 37.051 51.531 36.766 51.531 cv
36.664 51.719 36.566 51.91 36.48 52.109 cv
36.547 52.285 36.621 52.473 36.699 52.664 cv
36.621 54.586 37.984 54.707 39.418 55.543 cv
39.18 55.805 37.523 54.824 36.953 54.906 cv
36.887 55.035 36.82 55.168 36.766 55.297 cv
37.195 55.898 li
38.039 55.969 39.465 57.41 40.309 58.047 cv
40.164 59.582 40.035 61.117 39.902 62.652 cv
39.98 62.695 40.055 62.758 40.145 62.816 cv
40.012 63.512 39.617 64.754 39.617 65.449 cv
40.344 66.098 39.652 66.395 39.617 67.609 cv
40.418 68.469 40.199 69.168 40.176 70.492 cv
40.289 70.586 40.41 70.68 40.527 70.785 cv
40.539 71.527 40.547 72.285 40.574 73.043 cv
40.746 73.191 40.922 73.348 41.109 73.5 cv
41.133 74.434 41.207 75.105 41.414 76.098 cv
40.812 76.414 40.242 76.309 39.605 76.617 cv
39.836 76.898 li
41.848 77.008 43.27 75.98 45.125 75.98 cv
48.188 77.621 47.656 79.059 51.324 76.98 cv
53.09 76.734 53.562 79.887 56.008 78.578 cv
59.727 75.473 58.785 77.055 61.984 79.344 cv
62.395 79.332 62.797 79.332 63.203 79.332 cv
66.398 77.09 65.254 76.109 68.785 78.988 cv
70.465 79.273 71.629 76.98 72.684 76.98 cv
75.426 77.965 75.973 78.164 78.914 76.641 cv
77.98 75.438 77.77 77.137 76.93 77.137 cv
76.84 76.664 76.953 76.32 76.961 75.93 cv
77.816 75.117 78.672 74.305 79.527 73.5 cv
79.527 73.453 li
78.98 73.172 78.434 72.898 77.895 72.629 cv
77.938 71.707 77.84 70.703 78.496 70.137 cv
77.895 66.855 78.137 63.277 78.355 59.996 cv
78.582 59.641 78.816 59.289 79.047 58.945 cv
79.969 57.848 81.141 57.562 82.094 56.48 cv
81.852 56.145 li
80.898 56.348 80.371 56.547 79.57 56.973 cv
79.195 56.031 83.617 56.398 81.852 52.414 cv
51.43 47.297 mo
51.48 47.898 li
51.445 47.898 51.414 47.898 51.379 47.914 cv
51.023 47.602 51.086 47.547 51.117 47.246 cv
51.25 47.227 51.25 47.227 51.43 47.297 cv
51.82 47.223 mo
51.445 47.078 51.398 46.711 51.309 46.488 cv
51.363 46.418 51.414 46.363 51.465 46.309 cv
52.078 46.434 51.82 47.223 51.82 47.223 cv
52.125 45.625 mo
52.293 46 52.34 46.098 52.316 46.719 cv
51.941 46.184 51.934 46.133 51.898 45.625 cv
cp
52.445 44.879 mo
52.543 45.07 52.66 45.281 52.781 45.496 cv
52.68 45.875 52.68 45.875 52.645 45.855 cv
52.461 45.602 52.305 45.363 52.148 45.133 cv
cp
52.902 44.18 mo
53.094 44.398 53.391 44.602 53.355 45.125 cv
53.277 45.16 53.203 45.211 53.137 45.262 cv
52.98 44.973 52.82 44.684 52.668 44.414 cv
52.746 44.332 52.82 44.246 52.902 44.18 cv
53.742 43.809 mo
53.742 43.977 53.742 44.145 53.754 44.309 cv
53.672 44.355 53.586 44.418 53.5 44.48 cv
53.16 43.914 53.23 43.945 53.203 43.473 cv
53.559 43.473 53.441 43.727 53.742 43.809 cv
54.246 43.719 mo
54.184 43.789 54.105 43.891 54.027 43.891 cv
53.699 43.133 li
53.734 43.066 53.762 43.02 53.809 42.965 cv
54.121 43.02 54.164 43.203 54.246 43.719 cv
54.43 42.973 mo
54.254 42.668 54.23 42.535 54.223 42.285 cv
54.273 42.227 54.328 42.168 54.395 42.109 cv
54.621 42.277 54.527 43.082 54.43 42.973 cv
72.969 76.57 mo
73.031 76.465 73.109 76.367 73.188 76.273 cv
74.566 76.57 75.109 76.414 76.555 76.051 cv
76.543 76.395 76.535 76.746 76.535 77.102 cv
74.711 77.207 li
73.023 76.617 73.023 76.617 72.969 76.57 cv
66.211 68.52 mo
65.617 67.762 63.512 65.52 63.512 64.602 cv
64.645 64.066 65.66 65.711 66.387 66.582 cv
68.098 68.34 70.332 69.406 72.527 70.535 cv
78.496 73.441 78.496 73.441 78.582 73.512 cv
77.215 75.363 76.523 75.828 74.438 76.121 cv
70.039 75.059 68.777 72.234 66.211 68.52 cv
72.703 57.043 mo
73.316 57.375 74.473 57.434 75.371 57.871 cv
75.281 58.07 75.141 58.543 74.984 58.711 cv
73.746 58.121 72.551 57.258 71.75 56.195 cv
72.102 55.707 72.969 55.773 73.539 55.711 cv
73.539 55.734 73.539 55.758 73.547 55.793 cv
74.262 55.637 74.426 55.336 74.984 55.805 cv
74.723 56.195 li
73.91 56.195 72.598 55.934 72.055 56.516 cv
73.176 56.523 74.086 56.609 75.293 56.867 cv
75.043 57.695 73.164 56.914 72.715 56.797 cv
72.703 56.879 72.703 56.961 72.703 57.043 cv
74.977 53.797 mo
75.086 54.059 76.105 57.082 75.602 56.539 cv
75.117 55.355 74.414 54.777 74.977 53.797 cv
72.934 55.367 mo
72.91 55.336 72.895 55.309 72.879 55.285 cv
73.316 54.871 73.582 54.719 74.145 54.457 cv
74.219 54.578 74.305 54.695 74.395 54.812 cv
74.188 55.188 73.297 55.309 72.934 55.367 cv
57.324 40.836 mo
57.281 40.918 57.234 41.004 57.16 41.039 cv
57.051 40.953 56.941 40.883 56.832 40.812 cv
56.863 40.738 56.895 40.672 56.941 40.609 cv
57.051 40.625 57.152 40.684 57.324 40.836 cv
57.312 39.855 mo
57.246 39.891 57.191 39.926 57.137 39.961 cv
56.84 39.785 li
56.84 39.691 li
57.027 39.539 56.973 39.539 57.324 39.738 cv
57.312 39.773 57.312 39.809 57.312 39.855 cv
55.273 43.668 mo
55.293 43.621 55.328 43.574 55.359 43.539 cv
55.5 43.609 55.645 43.691 55.789 43.773 cv
55.789 43.891 55.688 43.977 55.582 43.977 cv
55.438 43.871 55.293 43.715 55.273 43.668 cv
55.809 44.879 mo
55.754 44.895 55.695 44.926 55.656 44.953 cv
55.434 44.719 55.211 44.477 54.988 44.258 cv
55.254 43.973 55.684 44.422 55.809 44.879 cv
55.359 43.125 mo
55.359 43.055 55.359 43.055 55.469 42.805 cv
55.633 42.902 55.977 42.973 55.941 43.34 cv
55.898 43.363 55.855 43.387 55.82 43.422 cv
55.668 43.312 55.512 43.223 55.359 43.125 cv
56.734 45.676 mo
56.719 45.805 56.711 45.934 56.711 46.062 cv
56.699 46.062 56.688 46.078 56.676 46.09 cv
56.305 45.875 56.16 45.594 55.984 45.473 cv
55.984 46.266 li
56.262 46.348 56.578 46.23 56.543 46.832 cv
56.512 46.855 56.48 46.879 56.445 46.914 cv
55.875 46.41 li
55.238 48.629 54.867 51.215 54.977 53.609 cv
55.48 53.23 55.48 53.293 56.152 53.406 cv
56.324 52.133 56.445 50.766 56.84 49.664 cv
57.168 50.727 56.887 52.121 56.742 53.328 cv
55.688 53.574 55.098 53.895 54.23 54.234 cv
53.75 55.273 53.461 55.781 53.539 57.266 cv
53.66 57.293 53.781 57.328 53.902 57.363 cv
53.902 57.504 li
53.418 57.562 53.344 57.977 53.188 58.438 cv
53.156 58.438 li
53.121 58.438 53.211 57.02 53.199 56.891 cv
52.145 54.414 54.484 50.848 54.965 48.512 cv
55.008 47.754 55.359 45.5 55.887 45.18 cv
56.16 45.344 56.445 45.512 56.734 45.676 cv
52.617 60.883 mo
52.91 60.883 li
53.109 59.879 53.309 59.238 53.734 58.379 cv
54 58.391 54.262 58.402 54.539 58.426 cv
54.383 59.723 54.383 61.754 52.836 62.133 cv
51.707 61.93 52.277 57.824 52.477 57.457 cv
52.582 57.527 52.695 57.609 52.816 57.695 cv
52.816 58.695 52.672 59.762 52.617 60.883 cv
52.719 56.785 mo
52.672 56.855 52.605 56.938 52.551 56.961 cv
52.012 56.773 51.684 56.523 51.336 56.266 cv
51.336 56.207 51.336 56.145 51.348 56.086 cv
51.852 56.121 52.289 56.207 52.719 56.785 cv
52.309 55.426 mo
52.211 55.355 52.125 55.285 52.035 55.223 cv
52.035 55.168 52.035 55.109 52.047 55.059 cv
52.094 55.086 52.344 55.168 52.43 55.355 cv
52.391 55.379 52.344 55.402 52.309 55.426 cv
50.391 55.863 mo
50.422 56.066 li
50.48 56.016 50.531 55.98 50.586 55.945 cv
51.105 56.559 51.125 57.918 50.039 57.918 cv
48.051 57.469 48.746 56.109 50.391 55.863 cv
48.82 55.734 mo
48.086 55.543 47.836 55.012 48.91 55.012 cv
49.074 55.32 49.348 55.59 48.82 55.734 cv
50.773 55.555 mo
50.895 55.438 51.027 55.336 51.156 55.223 cv
51.324 55.336 51.391 55.285 51.508 55.637 cv
51.355 55.758 51.168 55.77 51.082 55.793 cv
50.797 55.602 50.797 55.602 50.773 55.555 cv
51.168 54.445 mo
51.301 54.363 51.434 54.281 51.574 54.211 cv
51.664 54.379 51.664 54.379 51.719 54.586 cv
51.676 54.648 51.641 54.719 51.605 54.789 cv
51.562 54.789 li
51.445 54.766 51.324 54.742 51.203 54.73 cv
cp
51.531 56.809 mo
51.641 56.867 51.762 56.926 51.883 56.984 cv
51.883 57.008 51.652 58.84 51.523 58.695 cv
50.941 57.48 50.961 57.965 51.531 56.809 cv
56.402 55.379 mo
56.402 55.781 55.512 55.98 55.219 56.051 cv
55.086 55.945 li
55.566 55.59 55.766 55.523 56.402 55.379 cv
56.031 55.145 mo
55.844 55.188 55.293 55.391 55.195 55.355 cv
55.172 55.309 55.152 55.262 55.129 55.223 cv
55.512 55.023 55.633 54.824 56.129 54.859 cv
cp
56.152 56.348 mo
55.918 56.633 55.492 56.844 55.184 56.844 cv
55.086 56.703 li
55.406 56.453 55.699 56.016 56.152 56.348 cv
55.109 57.305 mo
55.195 57.316 55.285 57.352 55.469 57.48 cv
55.445 57.48 55.426 57.48 55.414 57.492 cv
55.086 57.352 li
55.086 57.328 55.098 57.316 55.109 57.305 cv
55.602 58.238 mo
55.547 58.297 55.5 58.332 55.438 58.332 cv
55.316 58.246 55.207 58.18 55.098 58.105 cv
55.098 57.918 li
55.328 57.754 55.414 57.965 55.602 58.238 cv
55.285 58.859 mo
55.238 58.898 55.195 58.934 55.16 58.969 cv
55.074 58.898 54.996 58.828 54.922 58.754 cv
54.922 58.695 54.922 58.648 54.934 58.602 cv
55.043 58.684 55.16 58.766 55.285 58.859 cv
54.832 59.109 mo
55.469 59.383 55.172 59.773 55.141 59.734 cv
54.746 59.465 54.613 59.43 54.832 59.109 cv
55.25 60.488 mo
55.23 60.539 55.207 60.598 55.184 60.656 cv
55.074 60.633 54.965 60.609 54.867 60.598 cv
54.824 60.504 54.789 60.422 54.758 60.34 cv
54.941 60.207 55.023 60.281 55.25 60.488 cv
54.711 57.598 mo
54.691 57.598 54.668 57.598 54.648 57.609 cv
54.582 57.562 54.516 57.516 54.461 57.48 cv
54.461 57.293 54.527 57.293 54.594 57.164 cv
54.438 57.152 54.285 57.137 54.141 57.137 cv
53.766 55.91 53.977 55.438 54.293 54.293 cv
55.043 54.043 55.758 53.785 56.613 53.785 cv
56.633 53.809 56.656 53.844 56.676 53.879 cv
55.941 55.07 54.57 54.07 54.711 55.969 cv
54.613 56.516 54.254 56.633 54.77 56.973 cv
54.781 57.176 54.855 57.328 54.711 57.598 cv
54.539 57.93 mo
54.57 58.129 li
54.516 58.18 54.473 58.223 54.43 58.281 cv
54.363 58.18 54.309 58.07 54.254 57.965 cv
cp
55.109 62.039 mo
55.109 62.098 55.109 62.168 55.117 62.238 cv
55.062 62.285 55.062 62.285 54.996 62.285 cv
54.711 62.145 54.621 61.969 54.504 61.801 cv
54.516 61.73 54.527 61.672 54.539 61.613 cv
54.812 61.672 54.812 61.859 55.109 62.039 cv
55.031 62.852 mo
54.996 63.109 li
54.941 63.102 54.887 63.102 54.832 63.102 cv
54.516 63.055 54.582 62.863 54.504 62.723 cv
54.711 62.438 54.711 62.547 55.031 62.852 cv
54.91 64.055 mo
54.547 63.832 54.121 63.551 54.121 63.207 cv
54.406 63.207 54.965 63.551 54.91 64.055 cv
54.648 64.766 mo
54.539 64.754 54.43 64.754 54.316 64.754 cv
54.242 64.672 54.164 64.59 54.098 64.504 cv
54.152 64.41 54.254 64.293 54.34 64.234 cv
54.504 64.387 54.613 64.398 54.648 64.766 cv
46.266 62.77 mo
46.223 62.77 46.18 62.77 46.133 62.781 cv
44.324 62.461 43.613 59.004 44.543 57.695 cv
46.059 56.18 46.938 61.461 46.266 62.77 cv
44.664 56.773 mo
44.609 56.652 44.555 56.539 44.5 56.43 cv
44.555 56.348 44.621 56.277 44.688 56.207 cv
44.707 56.266 44.84 56.961 44.664 56.773 cv
44.301 57.258 mo
44.227 57.066 44.148 56.891 44.082 56.715 cv
44.227 56.582 44.227 56.582 44.27 56.582 cv
44.414 56.734 44.422 57.387 44.301 57.258 cv
51.156 66.57 mo
51.027 66.961 50.797 68.648 50.336 68.648 cv
48.141 68.023 45.98 66.617 44.191 65.344 cv
44.621 64.695 45.039 64.152 45.543 63.586 cv
46.035 63.586 50.367 65.625 51.156 66.57 cv
43.227 65.484 mo
44.969 66.406 46.75 67.621 48.625 68.66 cv
48.578 69.086 48.449 69.535 48.285 69.996 cv
48.254 69.996 48.219 69.996 48.195 70.004 cv
46.156 69.121 44.27 68.305 42.5 67.125 cv
42.5 66.465 42.93 65.945 43.227 65.484 cv
42.02 66.758 mo
41.207 66.016 40.812 65.684 40.387 64.789 cv
40.727 64.281 40.617 63.867 40.859 63.383 cv
41.582 63.855 42.164 64.27 42.863 64.953 cv
42.863 65.355 42.031 66.758 42.02 66.758 cv
44.445 69.508 mo
45.617 68.883 49.316 70.879 50.918 71.398 cv
51.621 71.684 51.434 71.848 51.094 72.555 cv
51.027 72.555 li
49.73 72.094 45.18 71.094 44.445 69.508 cv
48.473 72.402 mo
48.473 72.699 48.219 73.844 47.793 73.844 cv
46.223 73.43 44.664 72.555 43.379 71.742 cv
43.379 71.316 43.566 70.703 43.742 70.406 cv
45.367 70.961 46.801 71.551 48.473 72.402 cv
56.391 76.074 mo
56.348 76.074 56.312 76.086 56.281 76.098 cv
53.75 75.625 51.137 75 48.754 74.266 cv
48.777 73.75 48.875 73.301 49.02 72.863 cv
50.105 72.863 51.895 73.641 53.047 73.957 cv
54.539 74.148 57.336 73.523 56.391 76.074 cv
52.012 72.898 mo
51.859 72.566 51.961 72 51.98 71.766 cv
54.559 71.766 57.168 72.426 59.879 72.5 cv
60.078 72.52 60.266 72.52 60.516 72.699 cv
60.516 73.043 60.516 73.395 60.527 73.75 cv
60.273 73.793 60.023 73.855 59.77 73.914 cv
57.227 73.727 54.352 73.785 52.012 72.898 cv
56.383 70.207 mo
56.391 70.586 56.438 71.02 56.391 71.527 cv
56.359 71.516 56.324 71.516 56.293 71.516 cv
53.629 71.352 51.391 70.809 48.855 70.148 cv
48.922 69.57 49.031 69.227 49.207 68.777 cv
51.598 69.383 53.922 69.734 56.383 70.207 cv
51.246 68.812 mo
51.246 68.094 51.562 67.246 51.906 66.664 cv
54 66.75 56.312 66.961 58.477 67.27 cv
58.762 67.422 58.531 69.793 58.512 69.77 cv
56.129 69.52 53.375 69.617 51.246 68.812 cv
63.227 70.645 mo
63.281 70.977 63.289 71.375 63.25 71.766 cv
62.734 71.754 62.227 71.754 61.723 71.754 cv
60.328 71.754 57.984 71.965 56.809 71.551 cv
56.84 70.207 li
58.52 70.207 61.723 69.914 63.227 70.645 cv
68.961 73.359 mo
67.066 73.938 63.578 74.113 61.668 74.113 cv
60.805 73.832 61.066 73.254 61.086 72.473 cv
63.215 72.223 65.441 72.344 67.648 72.414 cv
67.648 71.918 li
66.527 71.918 63.809 72.578 63.809 70.938 cv
64.051 70.773 64.355 70.879 64.707 70.914 cv
64.629 71.043 64.555 71.176 64.488 71.316 cv
64.543 71.398 64.609 71.48 64.676 71.578 cv
64.914 71.578 65.156 71.578 65.398 71.59 cv
65.332 70.938 li
65.199 70.914 65.078 70.891 64.961 70.879 cv
67.625 70.457 67.297 70.703 68.961 73.359 cv
66.055 69.805 mo
65.184 69.617 li
64.973 68.984 64.543 68.07 64.871 68.047 cv
65.004 68.035 66.023 69.25 66.156 69.676 cv
66.121 69.711 66.09 69.758 66.055 69.805 cv
59.395 67.609 mo
61.012 67.609 62.602 67.422 64.27 67.848 cv
64.281 68.426 64.289 69.012 64.312 69.605 cv
64.027 69.652 63.742 69.711 63.469 69.77 cv
62.031 69.676 60.617 69.711 59.254 69.547 cv
59.254 68.934 59.191 67.977 59.395 67.609 cv
61.359 57.652 mo
61.359 57.574 li
61.777 57.355 61.777 57.422 62.352 57.816 cv
62.352 57.902 li
62.164 58.051 li
61.719 57.969 61.559 57.836 61.359 57.652 cv
61.512 58.254 mo
61.785 58.336 62.059 58.43 62.348 58.527 cv
62.328 58.645 62.328 58.777 62.328 58.902 cv
62.254 58.891 62.18 58.891 62.105 58.891 cv
61.695 58.82 61.395 58.547 61.512 58.254 cv
61.344 56.906 mo
61.703 56.906 61.824 56.816 62.234 57.133 cv
62.148 57.207 62.082 57.277 62.012 57.348 cv
61.672 57.207 61.445 57.055 61.344 56.906 cv
61.324 56.434 mo
61.164 56.094 li
61.496 55.988 61.762 56.188 62.172 56.391 cv
62.172 56.602 li
62.133 56.602 62.09 56.621 62.051 56.633 cv
61.801 56.562 61.562 56.488 61.324 56.434 cv
61.098 55.496 mo
61.082 55.391 61.082 55.301 61.082 55.211 cv
61.391 55.16 61.605 55.336 61.918 55.621 cv
61.82 55.688 61.738 55.777 61.652 55.867 cv
61.457 55.742 61.277 55.621 61.098 55.496 cv
60.984 54.816 mo
60.984 54.711 60.984 54.605 61 54.516 cv
61.309 54.605 61.617 54.695 61.934 54.785 cv
61.77 54.938 61.484 54.965 61.379 54.98 cv
61.234 54.922 61.109 54.859 60.984 54.816 cv
60.902 54.008 mo
60.77 53.559 61.406 53.926 61.582 53.996 cv
61.582 54.043 61.594 54.27 61.504 54.223 cv
61.297 54.152 61.098 54.082 60.902 54.008 cv
60.809 53.23 mo
61 53.156 61.316 52.891 61.629 53.141 cv
61.629 53.305 li
61.422 53.438 li
61.164 53.422 60.902 53.379 60.809 53.23 cv
60.797 52.309 mo
60.98 52.309 61.164 52.324 61.352 52.336 cv
61.395 52.426 61.441 52.508 61.488 52.609 cv
61.43 52.656 61.371 52.723 61.316 52.781 cv
60.934 52.707 li
60.891 52.57 60.844 52.434 60.797 52.309 cv
60.465 51.816 mo
60.465 51.602 li
60.746 51.668 61.027 51.738 61.324 51.816 cv
61.199 51.953 61.168 52.004 61.043 52.004 cv
60.844 51.938 60.656 51.871 60.465 51.816 cv
60.176 50.855 mo
60.215 50.801 60.25 50.742 60.285 50.703 cv
60.535 50.895 60.781 51.105 61.031 51.316 cv
60.977 51.371 60.926 51.43 60.887 51.508 cv
60.801 51.508 li
60.34 51.316 60.34 51.105 60.176 50.855 cv
60.848 50.703 mo
60.645 50.555 60.441 50.398 60.25 50.262 cv
60.77 50.164 li
61.066 50.434 li
61.066 50.621 60.922 50.688 60.848 50.703 cv
60.051 49.781 mo
60.051 49.566 60.109 49.598 60.168 49.477 cv
60.422 49.598 60.68 49.723 60.938 49.859 cv
60.777 50.027 60.609 49.98 60.453 50 cv
60.312 49.922 60.184 49.844 60.051 49.781 cv
59.914 49.168 mo
59.895 49.082 59.871 48.996 59.871 48.93 cv
60.098 48.93 60.344 48.93 60.59 48.953 cv
60.633 49.035 60.672 49.125 60.711 49.238 cv
60.672 49.238 60.633 49.238 60.59 49.258 cv
60.363 49.215 60.137 49.191 59.914 49.168 cv
59.691 48.465 mo
59.988 48.363 60.219 48.281 60.574 48.523 cv
60.441 48.668 60.367 48.684 60.254 48.711 cv
cp
59.629 47.688 mo
59.859 47.441 60.156 47.703 60.484 47.934 cv
60.434 47.988 60.387 48.043 60.336 48.113 cv
60.188 48.094 60.039 48.094 59.906 48.094 cv
59.805 47.953 59.711 47.809 59.629 47.688 cv
60.168 45.32 mo
60.516 45.805 60.988 47.59 61.473 47.883 cv
61.613 49.43 62.668 50.707 63.105 52.309 cv
62.754 52.508 62.086 53.137 61.855 53.184 cv
61.492 52.793 60.266 46.254 60.168 45.32 cv
63.316 54.742 mo
63.316 55.145 62.93 55.297 62.633 55.531 cv
62.633 55.898 62.578 56.324 62.48 56.762 cv
62.449 56.762 62.426 56.773 62.402 56.785 cv
62.371 56.773 62.336 56.762 62.316 56.75 cv
62.281 56.188 61.887 54.676 62.215 54.316 cv
62.621 54.387 62.863 54.445 63.316 54.742 cv
62.348 53.82 mo
62.336 53.727 62.328 53.633 62.328 53.551 cv
63.117 53.621 63.598 54.07 64.289 54.656 cv
64.246 54.707 64.203 54.754 64.137 54.754 cv
63.531 54.438 62.941 54.129 62.348 53.82 cv
62.539 59.387 mo
62.512 59.461 62.371 59.566 62.285 59.602 cv
61.742 59.523 61.812 59.387 61.586 59.012 cv
61.992 59.043 62.094 59.027 62.539 59.387 cv
62.215 59.926 mo
62.316 60.008 62.426 60.09 62.535 60.172 cv
62.492 60.246 62.449 60.312 62.402 60.398 cv
61.984 60.398 li
61.91 60.305 61.844 60.207 61.777 60.125 cv
61.922 60.055 62.066 59.98 62.215 59.926 cv
62.699 60.902 mo
62.699 60.977 62.535 61.297 62.48 61.27 cv
62.141 61.129 62.074 60.977 61.934 60.785 cv
62.25 60.738 62.316 60.703 62.699 60.902 cv
62.844 61.637 mo
62.832 61.66 62.82 61.684 62.809 61.719 cv
62.734 61.719 li
62.57 61.672 62.402 61.625 62.238 61.59 cv
62.438 61.461 62.578 61.398 62.844 61.637 cv
62.887 62.297 mo
62.863 62.391 62.797 62.641 62.734 62.605 cv
62.547 62.531 62.359 62.477 62.184 62.418 cv
62.172 62.344 62.172 62.273 62.172 62.203 cv
62.316 62.047 62.691 62.012 62.887 62.297 cv
62.238 62.816 mo
62.328 62.816 62.402 62.781 62.59 62.938 cv
62.59 62.996 li
62.5 63.055 62.418 63.074 62.348 63.074 cv
62.305 63.062 62.262 63.055 62.227 63.055 cv
62.227 62.973 62.227 62.887 62.238 62.816 cv
64.137 63.598 mo
64.016 63.773 61.953 65.082 61.934 65.07 cv
61.766 64.801 61.602 64.527 61.449 64.27 cv
62.238 63.797 63.203 62.887 64.137 63.598 cv
61.449 64.754 mo
61.457 64.836 61.473 64.918 61.492 65.004 cv
61.25 65.332 61.25 65.332 61.23 65.32 cv
61.098 65.25 60.965 65.191 60.832 65.133 cv
60.879 64.625 60.953 64.648 61.449 64.754 cv
63.117 65.223 mo
63.426 65.641 63.566 65.898 63.797 66.512 cv
63.062 66.734 62.469 66.785 61.766 66.793 cv
61.141 66.77 60.562 66.691 60.059 66.57 cv
60.09 61.461 li
59.988 59.453 58.785 47.363 59.312 46.797 cv
59.434 47.066 60.078 46.773 60.199 47.176 cv
60.168 47.223 60.133 47.27 60.098 47.328 cv
59.738 47.141 59.617 47.176 59.301 47.176 cv
59.496 49.301 60.254 51.176 60.395 53.469 cv
60.461 54.031 60.758 54.246 60.637 55.023 cv
60.691 55.109 60.758 55.188 60.824 55.273 cv
60.266 57.387 63.094 61.613 61.371 63.832 cv
61.086 64.066 60.805 64.305 60.527 64.539 cv
60.527 64.895 60.527 65.25 60.539 65.602 cv
61.965 66.133 61.734 65.414 63.117 65.223 cv
59.746 43.629 mo
59.707 43.594 59.488 43.688 59.453 43.707 cv
59.348 43.668 59.043 43.523 58.957 43.484 cv
59.043 43.391 59.328 43.234 59.746 43.629 cv
59.312 43.008 mo
59.238 42.969 58.969 42.871 58.969 42.797 cv
59.211 42.582 59.145 42.559 59.465 42.84 cv
59.434 42.902 59.355 42.996 59.312 43.008 cv
55.184 51.781 mo
55.406 51.539 55.84 51.715 56.109 52.008 cv
56.066 52.07 56.031 52.152 56.004 52.23 cv
55.629 52.23 li
55.48 52.102 55.332 51.992 55.184 51.879 cv
cp
55.98 52.898 mo
55.98 52.918 55.98 52.93 55.992 52.949 cv
55.914 53 55.84 53.062 55.777 53.133 cv
55.125 52.73 li
55.109 52.598 55.109 52.598 55.156 52.516 cv
55.422 52.633 55.699 52.766 55.98 52.898 cv
56.039 51.707 mo
55.566 51.461 55.293 51.215 55.582 50.836 cv
55.688 50.906 56.543 51.355 56.039 51.707 cv
55.238 50.137 mo
55.5 49.852 55.953 50.246 56.305 50.531 cv
56.289 50.59 56.273 50.645 56.273 50.715 cv
56.199 50.715 56.129 50.738 56.062 50.754 cv
55.605 50.664 55.445 50.344 55.238 50.137 cv
55.746 49.184 mo
55.957 49.406 56.855 50.531 56.191 50.176 cv
56.047 50.074 55.152 49.184 55.746 49.184 cv
56.145 49.32 mo
55.871 48.898 55.883 48.863 55.914 48.512 cv
56.129 48.648 56.418 48.918 56.418 49.355 cv
56.324 49.34 56.227 49.32 56.145 49.32 cv
55.812 48.094 mo
55.875 48.02 55.945 47.945 56.016 47.891 cv
56.223 48.039 56.43 48.188 56.656 48.355 cv
56.656 48.395 56.555 48.617 56.5 48.633 cv
56.262 48.445 56.031 48.262 55.812 48.094 cv
55.883 47.285 mo
55.93 47.18 55.98 47.09 56.047 47.004 cv
56.262 47.109 56.477 47.215 56.703 47.32 cv
56.719 47.406 56.637 47.852 56.602 47.828 cv
56.355 47.637 56.109 47.461 55.883 47.285 cv
56.863 48.18 mo
57.035 48.523 57.125 49.051 56.863 49.336 cv
56.852 49.32 56.84 49.312 56.84 49.301 cv
56.82 49.227 56.523 48.18 56.863 48.18 cv
57.555 49.949 mo
58.039 50.02 58.477 50.066 59.035 50.312 cv
59.023 50.398 59.023 50.48 59.023 50.562 cv
58.738 50.586 58.453 50.621 58.18 50.656 cv
57.949 50.633 57.719 50.609 57.488 50.598 cv
57.289 50.219 57.41 50.211 57.555 49.949 cv
59.121 51.363 mo
59.211 55.145 59.527 58.988 59.395 62.832 cv
59.344 62.945 59.289 63.062 59.242 63.184 cv
58.762 63.348 58.16 63.266 57.707 63.289 cv
57.453 63.219 57.215 63.148 56.973 63.09 cv
57.094 59.125 57.227 55.156 57.355 51.188 cv
58.004 51.164 58.367 51.141 59.121 51.363 cv
59.934 44.09 mo
59.914 44.195 59.898 44.301 59.898 44.41 cv
59.844 44.41 59.781 44.41 59.723 44.422 cv
59.496 44.301 59.266 44.184 59.051 44.066 cv
59.109 44.008 59.164 43.949 59.242 43.891 cv
59.66 43.891 59.836 44.055 59.934 44.09 cv
60.039 44.969 mo
59.961 45.059 59.637 45.105 59.508 45.105 cv
59.457 45.031 59.195 44.98 59.16 44.926 cv
59.258 44.859 59.707 44.719 59.887 44.719 cv
cp
59.367 45.641 mo
59.434 45.605 59.496 45.57 59.57 45.547 cv
59.703 45.664 59.848 45.781 59.988 45.91 cv
59.938 45.957 59.879 46.02 59.824 46.078 cv
59.539 46.043 59.289 45.91 59.367 45.641 cv
60.164 46.512 mo
60.145 46.652 59.859 46.773 59.812 46.773 cv
59.66 46.68 59.508 46.582 59.375 46.512 cv
59.441 46.398 59.508 46.301 59.594 46.207 cv
59.773 46.301 59.973 46.398 60.164 46.512 cv
56.992 64.516 mo
56.785 64.328 56.797 64.316 56.82 64.176 cv
57.336 64.02 59.277 63.559 59.418 64.363 cv
58.617 64.387 57.676 64.516 56.992 64.516 cv
56.191 44.445 mo
56.273 44.445 56.578 44.734 56.742 44.875 cv
56.742 44.988 56.742 45.102 56.754 45.23 cv
56.719 45.215 56.684 45.215 56.66 45.215 cv
56.449 45.215 56.203 44.484 56.191 44.445 cv
56.227 43.801 mo
56.414 43.602 56.473 43.727 56.812 43.891 cv
56.883 44.434 li
56.859 44.434 56.848 44.445 56.836 44.461 cv
56.262 43.879 56.262 43.879 56.227 43.801 cv
57.074 43.422 mo
57.023 43.422 56.977 43.422 56.93 43.434 cv
56.742 43.258 56.555 43.082 56.379 42.906 cv
56.379 42.602 57.02 42.953 57.074 43.422 cv
56.469 40.918 mo
56.402 40.918 li
56.383 40.906 56.359 40.895 56.348 40.895 cv
56.383 40.801 56.414 40.707 56.457 40.609 cv
56.613 40.625 56.59 40.738 56.469 40.918 cv
56.578 42.031 mo
56.625 41.996 56.672 41.957 56.734 41.922 cv
56.883 42.07 56.988 42.211 57.285 42.359 cv
57.246 42.426 57.211 42.488 57.188 42.551 cv
57.105 42.551 li
56.805 42.324 56.707 42.223 56.578 42.031 cv
56.699 41.246 mo
57.004 41.246 li
57.152 41.426 57.453 41.602 57.215 41.863 cv
56.82 41.652 56.832 41.531 56.699 41.246 cv
57.695 39.621 mo
57.961 39.523 58.07 39.453 58.445 39.477 cv
58.906 41.594 59.254 46.926 58.715 49.633 cv
58.477 49.633 58.246 49.633 58.016 49.641 cv
57.848 49.57 57.688 49.5 57.52 49.441 cv
56.984 46.547 57.531 42.523 57.695 39.621 cv
58.969 41.637 mo
59.09 41.77 59.375 42.184 59.078 42.336 cv
58.98 42.016 58.816 41.805 58.969 41.637 cv
59.238 41.496 mo
59.402 41.578 59.582 41.66 59.762 41.742 cv
59.746 41.82 59.746 41.902 59.746 42 cv
59.688 42 59.625 42 59.582 42.016 cv
59.41 41.977 59.027 41.723 59.238 41.496 cv
60.254 42.461 mo
60.176 42.531 60.113 42.617 60.047 42.703 cv
59.844 42.562 59.652 42.441 59.461 42.328 cv
59.668 42.223 60.16 42.16 60.254 42.461 cv
60.785 43.211 mo
60.648 43.316 60.648 43.316 60.449 43.371 cv
59.902 43.227 59.27 43.164 59.973 42.914 cv
60.305 43.043 60.512 43.105 60.785 43.211 cv
60.891 43.703 mo
60.77 43.809 60.648 43.953 60.539 43.953 cv
60.242 43.883 60.199 43.773 60.098 43.633 cv
60.43 43.539 60.57 43.363 60.891 43.703 cv
61.152 44.406 mo
61.137 44.438 61.137 44.484 61.137 44.535 cv
60.676 44.684 li
59.996 44.57 60.059 44.418 60.461 44.105 cv
60.66 44.207 60.77 44.32 61.152 44.406 cv
61.453 45.238 mo
61.496 45.297 61.25 45.293 61.168 45.293 cv
60.844 45.25 60.531 44.938 60.418 45.086 cv
60.727 44.676 61.18 44.855 61.453 45.238 cv
61.75 45.734 mo
61.738 45.84 61.723 45.965 61.723 46.09 cv
61.652 46.09 61.578 46.09 61.508 46.105 cv
61.094 46.043 60.992 46.141 60.793 45.957 cv
60.875 45.789 60.977 45.633 61.078 45.48 cv
61.289 45.648 61.523 45.562 61.75 45.734 cv
61.969 46.582 mo
61.969 46.711 li
61.797 46.895 61.57 46.84 61.367 46.816 cv
61.16 46.375 li
61.398 46.281 61.691 46.414 61.969 46.582 cv
62.281 47.43 mo
61.422 47.414 li
61.305 47.293 li
61.742 47.031 61.812 47 62.281 47.43 cv
62.559 47.941 mo
62.441 48.066 62.07 48.066 61.988 48.066 cv
61.555 47.855 li
61.57 47.77 61.586 47.699 61.602 47.629 cv
61.91 47.734 62.23 47.84 62.559 47.941 cv
62.703 48.629 mo
62.672 48.664 62.637 48.719 62.605 48.77 cv
62.461 48.77 li
62.328 48.684 62.199 48.594 62.082 48.504 cv
62.211 48.293 62.523 48.223 62.703 48.629 cv
63.051 49.359 mo
62.918 49.465 li
62.602 49.43 62.516 49.348 62.383 49.207 cv
62.457 49.109 62.578 48.887 62.699 48.887 cv
62.777 48.969 62.973 49.109 63.051 49.359 cv
63.422 49.926 mo
63.371 49.977 63.32 50.051 63.289 50.121 cv
63.176 50.121 li
62.914 50.016 62.672 49.926 62.426 49.84 cv
62.621 49.629 63.062 49.754 63.422 49.926 cv
63.719 50.422 mo
63.719 50.465 63.719 50.508 63.734 50.551 cv
63.656 50.637 63.57 50.758 63.453 50.758 cv
63.121 50.715 62.973 50.699 62.891 50.508 cv
63.152 50.422 63.34 50.246 63.719 50.422 cv
63.828 51.184 mo
63.691 51.219 63.562 51.254 63.434 51.309 cv
63.219 51.168 62.938 51.043 63.004 50.883 cv
63.48 50.883 63.52 50.793 63.828 51.184 cv
64.121 51.625 mo
64.168 51.781 li
63.27 51.781 li
63.27 51.727 63.289 51.676 63.305 51.645 cv
63.574 51.625 63.848 51.625 64.121 51.625 cv
64.504 52.34 mo
64.484 52.414 64.484 52.414 64.203 52.543 cv
64.039 52.445 63.875 52.34 63.734 52.266 cv
63.824 52.191 63.918 52.117 64.016 52.066 cv
64.176 52.141 64.34 52.246 64.504 52.34 cv
66.453 58.168 mo
66.289 58.238 66.121 58.309 65.969 58.391 cv
64.949 58.145 64.75 58.059 64.211 57.129 cv
64.344 56.82 64.477 56.516 64.621 56.215 cv
64.684 56.207 64.762 56.207 64.836 56.207 cv
64.816 57.102 64.543 57.293 65.453 57.68 cv
65.477 57.395 65.301 57.266 65.223 57.188 cv
65.277 56.809 65.531 56.539 65.703 56.266 cv
65.254 55.922 65.125 55.676 64.684 55.426 cv
64.223 55.449 63.273 55.828 62.984 55.676 cv
62.973 55.602 62.973 55.531 62.973 55.473 cv
63.676 54.906 64.191 54.98 65.094 54.918 cv
64.645 53.82 63.652 53.609 62.766 53.148 cv
62.754 53.09 62.754 53.09 62.809 52.961 cv
65.484 53.68 66.188 55.188 66.453 58.168 cv
63.25 56.156 mo
63.324 56.156 63.379 56.195 63.523 56.277 cv
63.281 56.539 63.148 56.82 62.973 57.137 cv
62.941 57.137 62.906 57.137 62.875 57.152 cv
62.809 57.152 li
62.918 56.762 63.062 56.453 63.25 56.156 cv
64.191 55.957 mo
64.203 55.957 64.211 55.957 64.234 55.969 cv
64.234 56.348 64.039 56.961 63.688 57.195 cv
63.633 57.152 63.578 57.102 63.531 57.055 cv
cp
66.625 58.723 mo
66.176 59.074 65.828 59.23 65.453 59.43 cv
65.703 59.852 65.957 60.289 66.223 60.727 cv
66.176 60.785 66.133 60.844 66.102 60.918 cv
65.223 60.895 64.836 61.066 64.18 61.164 cv
64.18 61.48 63.555 61.883 63.281 61.969 cv
63.281 60.383 62.844 58.988 62.613 57.562 cv
63.457 56.652 64.828 58.402 65.477 59.062 cv
65.883 58.887 66.145 58.805 66.625 58.723 cv
67.145 65.047 mo
67.043 65.047 li
65.695 64.777 65.531 64.184 64.785 63.109 cv
63.609 63.074 li
63.598 63.055 63.59 63.039 63.578 63.027 cv
65.398 62.191 64.281 63.242 65.727 63.148 cv
65.531 62.887 65.332 62.641 65.148 62.391 cv
64.578 62.438 64.004 62.488 63.445 62.547 cv
63.391 62.488 63.336 62.438 63.281 62.391 cv
64.113 62.133 64.41 61.988 65.441 61.988 cv
65.805 62.453 li
65.922 62.438 66.055 62.438 66.188 62.438 cv
65.324 61.613 65.27 61.625 64.27 61.496 cv
64.27 61.379 li
64.578 61.129 65.484 61.246 65.988 61.246 cv
66.703 62.688 67.375 63.254 67.145 65.047 cv
73.484 70.621 mo
73.449 70.609 73.43 70.609 73.406 70.609 cv
72.477 70.289 72.023 69.961 71.344 69.406 cv
73.484 68.094 73.266 67.691 73.781 69.934 cv
73.465 70.16 73.484 70.223 73.484 70.621 cv
75.141 71.434 mo
75.055 71.434 li
74.461 71.234 74.109 71.008 73.727 70.703 cv
73.727 69.914 76.215 69.949 75.141 71.434 cv
70.609 69.062 mo
69.523 68.426 68.961 67.941 68.164 67.098 cv
69.094 66.676 69.984 66.793 71.016 66.832 cv
71.156 67.066 71.895 68.246 71.773 68.637 cv
71.445 68.73 70.828 69.062 70.609 69.062 cv
67.363 66.418 mo
67.23 66.297 66.98 66.23 66.988 66.062 cv
67.027 65.312 68.742 65.883 69.586 65.992 cv
68.688 66.156 67.461 66.418 67.363 66.418 cv
69.008 64.16 mo
69.039 64.16 li
69.105 64.469 68.941 64.609 68.734 64.906 cv
68.637 64.73 li
68.754 64.539 68.875 64.352 69.008 64.16 cv
68.207 65.012 mo
68.184 65.012 68.172 65.012 68.164 65.023 cv
67.867 64.59 68.25 64.27 68.449 63.973 cv
68.516 64.012 68.59 64.047 68.668 64.09 cv
68.668 64.16 68.281 64.836 68.207 65.012 cv
67.602 65.297 mo
67.539 65.297 li
67.496 65.262 67.449 65.234 67.406 65.215 cv
67.406 64.801 67.637 64.422 67.758 64.066 cv
67.801 64.105 67.844 64.141 67.898 64.176 cv
67.879 64.59 67.789 64.918 67.602 65.297 cv
66.473 59.98 mo
67.648 59.402 67.734 60.266 68.68 61.414 cv
68.68 61.793 67.898 63.738 67.812 63.691 cv
67.406 63.395 67.602 63.191 67.711 62.91 cv
67.285 62.082 66.473 60.855 66.473 59.98 cv
70.074 58.484 mo
70.301 58.637 70.543 58.793 70.785 58.957 cv
70.785 58.957 70.059 63.926 69.336 63.535 cv
68.867 63.027 71.18 59.309 70.289 58.746 cv
69.633 59.336 69.184 62.309 68.621 63.469 cv
68.449 63.469 68.492 63.418 68.457 63.383 cv
68.723 62.133 69.062 59.203 70.074 58.484 cv
71.07 59.051 mo
71.344 60.219 71.25 61.746 71.301 62.945 cv
71.016 63.062 70.742 63.184 70.465 63.312 cv
70.324 63.191 li
70.422 62.062 70.367 59.926 71.07 59.051 cv
70.344 57.93 mo
70.344 56.984 70.797 56.453 71.707 56.5 cv
72.102 57.008 72.176 57.41 72.254 58.223 cv
72.113 58.297 71.973 58.367 71.84 58.438 cv
71.047 58.355 70.852 58.332 70.344 57.93 cv
71.707 58.898 mo
72.52 59.336 72.375 61.094 71.883 61.93 cv
71.84 61.93 li
71.562 61.176 71.617 59.781 71.574 59.039 cv
cp
72.684 57.988 mo
73.527 57.988 72.836 59.219 72.66 59.629 cv
72.527 59.629 li
72.484 59.617 72.441 59.605 72.398 59.605 cv
72.32 58.766 72.363 58.648 72.684 57.988 cv
74.621 59.523 mo
74.426 61.434 72.805 65.262 70.664 65.578 cv
70.227 65.52 69.797 65.461 69.371 65.414 cv
69.371 63.512 71.344 63.891 72.41 62.32 cv
72.812 61.117 73.121 59.926 73.648 58.852 cv
74.109 58.852 74.23 59.098 74.621 59.523 cv
75.594 66.312 mo
74.637 67.02 73.508 68 72.363 68.188 cv
72.168 67.621 71.938 66.984 71.805 66.512 cv
72.715 65.922 75.594 63.312 75.594 66.312 cv
77.336 65.887 mo
77.441 66.359 77.629 66.832 77.531 67.457 cv
76.906 67.883 74.887 69.652 74.414 69.746 cv
74.109 69.18 73.902 68.684 73.68 68.188 cv
74.188 67.871 77.094 65.711 77.336 65.887 cv
75.863 71.02 mo
74.637 69.465 75.93 69.227 77.246 68.363 cv
77.344 68.363 77.441 68.578 77.543 68.754 cv
77.738 70.406 77.094 70.395 75.863 71.02 cv
77.434 70.949 mo
77.402 72.18 li
77.355 72.164 77.32 72.164 77.289 72.164 cv
76.645 72.129 76.246 72.027 75.723 71.848 cv
75.637 71.57 77.172 70.895 77.434 70.949 cv
67.43 76.914 mo
68.121 76.441 68.844 76.629 69.723 76.441 cv
70.512 76.133 71.258 75.543 72.078 76.074 cv
70.82 77.008 69.996 78.043 68.438 78.043 cv
67.789 77.801 67.68 77.43 67.43 76.914 cv
65.484 76.051 mo
65.5 75.578 65.52 75.105 65.539 74.633 cv
66.559 74.008 67.703 74.129 68.93 74.066 cv
69.008 73.914 69.094 73.758 69.184 73.617 cv
69.27 73.617 70.664 75.035 70.93 75.293 cv
69.062 75.93 67.922 76.32 66.109 76.395 cv
65.902 76.273 65.695 76.156 65.484 76.051 cv
49.566 76.441 mo
49.688 76.098 49.82 75.754 49.953 75.426 cv
52.277 75.625 54.461 76.43 56.863 76.688 cv
56.871 75.922 56.941 75.141 57.051 74.445 cv
58.609 74.492 64.375 73.938 64.836 74.93 cv
64.938 75.352 65.047 75.828 65.059 76.344 cv
64.113 77.301 63.477 78.293 62.215 78.516 cv
61.895 78.309 60.371 77.207 60.832 76.805 cv
62.215 76.98 li
62.371 77.477 62.172 77.953 62.418 78.398 cv
62.742 78.105 62.754 77.457 62.82 77.043 cv
63.281 76.973 63.664 76.938 64.246 76.98 cv
64.223 76.816 64.203 76.652 64.191 76.488 cv
61.746 76.191 59.18 75.445 57.027 76.688 cv
53.508 79.73 54.461 76.359 51.348 75.922 cv
50.754 76.121 50.105 76.441 49.566 76.441 cv
44.488 75.035 mo
44.629 74.398 44.773 73.984 45.027 73.477 cv
46.418 73.957 47.988 74.406 49.348 75.309 cv
49.371 75.664 49.402 76.441 49.129 76.734 cv
47.824 76.203 45.641 75.035 44.488 75.035 cv
41.91 74.008 mo
42.492 74.008 43.371 74.801 43.941 75.188 cv
43.711 75.496 42.965 75.871 42.656 75.98 cv
41.875 75.461 41.965 74.871 41.91 74.008 cv
41.414 71.387 mo
41.68 71.387 44.105 72.742 44.48 73.145 cv
44.379 73.406 43.82 74.48 43.785 74.469 cv
42.777 73.688 40.691 72.84 41.414 71.387 cv
40.867 68.898 mo
40.91 68.848 40.957 68.812 40.996 68.777 cv
41.746 69.477 42.293 69.863 43.27 70.371 cv
43.16 70.773 43.051 71.176 42.941 71.59 cv
42.918 71.59 42.91 71.59 42.898 71.598 cv
41.414 70.809 40.922 70.551 40.867 68.898 cv
40.496 66.297 mo
41.34 67.055 43.961 68.293 44.379 69.191 cv
44.051 69.605 44.027 69.664 43.613 69.723 cv
42.691 69.289 39.555 67.469 40.496 66.297 cv
40.68 53.207 mo
40.668 54.199 40.668 54.199 40.648 54.188 cv
40.223 53.926 39.762 53.559 39.762 53.078 cv
40.211 52.844 40.043 52.863 40.68 53.207 cv
42.02 52.547 mo
41.223 52.18 42.309 51.418 42.547 51.543 cv
42.449 51.859 42.285 52.266 42.02 52.547 cv
43.699 52.406 mo
43.559 53.621 43.031 54.508 42.457 55.652 cv
42.711 55.688 li
42.809 56.109 44.016 60.539 43.719 61.176 cv
43.062 60.895 42.699 60.504 42.133 60.457 cv
42.133 61.93 44.543 62.145 45.039 63.207 cv
44.699 63.668 44.246 64.516 43.73 64.695 cv
40.078 62.734 40.43 62.383 40.98 58.582 cv
41.34 58.281 41.516 58.297 42.031 58.215 cv
42.172 58.496 42.316 58.777 42.469 59.074 cv
42.48 59.074 42.492 59.074 42.516 59.086 cv
42.844 58.734 42.305 58.059 42.195 57.789 cv
40.582 57.609 39.762 56.785 38.543 55.863 cv
38.531 55.793 38.52 55.734 38.52 55.676 cv
37.531 55.5 li
37.531 55.402 37.531 55.32 37.543 55.238 cv
38.137 55.402 38.738 55.566 39.344 55.734 cv
39.344 55.793 39.355 55.852 39.363 55.922 cv
39.574 55.969 40.441 56.324 40.738 56.254 cv
39.441 54.578 36.227 54.258 37.348 51.836 cv
37.766 51.648 37.707 52.332 37.918 52.676 cv
38.102 52.473 38.301 52.277 38.5 52.086 cv
38.609 52.145 38.719 52.215 38.828 52.285 cv
38.836 52.465 38.852 52.641 38.871 52.816 cv
38.805 52.855 38.738 52.887 38.676 52.938 cv
38.676 53.172 li
39.465 53.172 39.453 52.465 39.773 53.703 cv
40.102 54.316 40.727 54.672 41.383 55.098 cv
41.68 54.988 41.23 53.055 41.176 52.855 cv
40.848 52.688 40.516 52.535 40.199 52.379 cv
40.199 52.227 40.41 52.086 40.496 51.98 cv
41.188 52.191 41.625 52.992 42.25 53.633 cv
42.875 53.457 43.152 52.879 43.559 52.355 cv
43.602 52.371 43.645 52.379 43.699 52.406 cv
43.809 57.941 mo
43.73 57.941 li
43.664 57.906 43.602 57.871 43.543 57.836 cv
43.566 57.539 43.68 57.375 43.82 57.164 cv
43.996 57.164 li
43.996 57.422 44.004 57.645 43.809 57.941 cv
44.215 55.746 mo
44.215 55.922 43.832 56.902 43.621 56.68 cv
43.086 56.102 43.293 54.543 43.797 53.996 cv
44.07 54.352 45.016 55.367 44.215 55.746 cv
43.621 45.133 mo
43.863 44.875 44.453 44.082 44.742 43.984 cv
44.797 44.035 44.852 44.082 44.906 44.141 cv
44.773 44.27 43.863 45.25 43.754 45.25 cv
43.711 45.203 43.664 45.168 43.621 45.133 cv
44.227 43.562 mo
43.941 44.152 43.699 44.566 43.098 44.848 cv
43.098 44.328 43.633 43.422 44.227 43.562 cv
45.508 42.652 mo
44.949 42.512 44.621 40.422 44.535 39.973 cv
44.574 39.918 44.621 39.855 44.664 39.809 cv
45.191 40.234 45.652 42.004 45.508 42.652 cv
45.203 47.578 mo
44.949 47.52 44.707 47.461 44.465 47.41 cv
44.203 46.855 43.887 46.148 43.887 45.648 cv
43.906 45.629 45.039 44.578 45.039 45.039 cv
44.555 45.512 44.336 46.266 44.84 46.996 cv
44.938 46.926 45.039 46.855 45.148 46.797 cv
45.113 46.055 45.254 45.594 45.41 44.969 cv
45.41 44.117 44.664 43.562 44.398 42.902 cv
44.453 42.855 44.512 42.82 44.566 42.781 cv
45.035 42.949 45.922 44.246 46.023 44.246 cv
46.07 44.188 46.113 44.129 46.168 44.082 cv
45.805 42.797 45.586 41.695 45.441 40.516 cv
45.574 40.34 li
45.629 40.34 li
46.617 42.25 46.609 45.746 45.203 47.578 cv
48.656 56.242 mo
48.523 57.129 li
48.043 56.879 47.57 56.633 47.098 56.395 cv
47.086 56.406 47.273 56.863 47.285 56.926 cv
47.738 57.695 49.754 58.555 50.699 58.188 cv
50.93 58.355 51.113 58.676 51.355 59.016 cv
51.422 58.957 51.5 58.91 51.574 58.859 cv
52.023 59.477 51.621 63.609 52.453 65.402 cv
52.641 65.402 52.879 65.297 53.102 65.223 cv
52.629 63.039 52.363 63.207 53.922 62.238 cv
54.383 62.652 53.805 64.48 53.66 65.223 cv
53.727 65.25 53.758 65.25 53.789 65.391 cv
53.848 65.391 53.914 65.391 53.977 65.402 cv
54.055 65.262 54.141 65.117 54.23 64.988 cv
54.309 65.004 54.309 65.004 54.727 65.234 cv
54.758 65.805 li
55.262 65.473 55.406 62.098 55.34 61.613 cv
55.129 61.52 54.922 61.426 54.727 61.34 cv
54.734 61.203 54.758 61.066 54.781 60.938 cv
54.988 60.938 55.117 61.164 55.305 61.449 cv
55.371 61.426 55.445 61.398 55.527 61.387 cv
55.977 60.09 55.734 58.316 55.953 57.031 cv
56.359 56.594 56.523 56.312 56.742 55.805 cv
56.754 55.805 56.766 55.816 56.785 55.828 cv
56.488 59.18 56.391 62.652 56.238 66.074 cv
56.773 66.074 li
56.941 64.977 li
57.688 64.977 58.453 64.988 59.277 65.117 cv
59.312 66.453 li
59.254 66.441 59.199 66.441 59.145 66.441 cv
55.535 66.262 51.246 66.039 48.207 63.938 cv
48.207 62.109 49.379 60.445 49.012 58.402 cv
48.887 58.391 48.77 58.391 48.656 58.391 cv
48.48 59.402 48.133 62.938 47.738 63.652 cv
47.582 63.621 47.441 63.586 47.297 63.551 cv
47.164 62.023 47.375 60.477 47.121 59.109 cv
46.156 57.102 45.18 55.051 44.348 53.113 cv
44.184 51.852 44.191 50.633 44.227 49.453 cv
44.543 49.289 44.566 49.156 44.992 49.254 cv
45.125 49.512 45.277 49.758 45.422 50.164 cv
45.883 53.395 46.047 54.094 48.656 56.242 cv
49.523 47.527 mo
47.031 49.301 47.031 49.227 47.738 52.168 cv
48.613 53.16 48.812 53.125 48.492 54.609 cv
48.152 54.719 47.844 54.871 47.57 54.934 cv
47.387 54.789 47.207 54.648 47.031 54.508 cv
46.945 53.598 46.574 52.961 46.246 52.227 cv
46.199 52.215 46.168 52.203 46.133 52.203 cv
46.094 51.355 46.023 50.621 45.914 49.902 cv
46.727 49.121 48.953 47.766 48.754 46.598 cv
49.086 46.242 49.699 46.949 49.523 47.527 cv
52.133 53.195 mo
51.762 53.574 51.18 54.105 50.609 53.953 cv
50.148 53.633 50.148 53.633 50.105 53.633 cv
50.434 54.211 51.059 55.07 49.918 55.262 cv
49.031 55.004 49.379 53.727 49.062 53.148 cv
46.113 48.742 49.336 46.668 52.289 50.043 cv
52.059 50.551 50.992 50.707 50.863 50.93 cv
51.113 51.094 51.367 51.27 51.621 51.449 cv
51.621 51.551 50.965 52.398 50.863 52.523 cv
51.512 52.832 51.156 51.961 51.906 52.203 cv
51.469 53.062 52.133 52.695 52.133 53.195 cv
52.453 54.918 mo
52.344 54.766 52.234 54.609 52.125 54.473 cv
52.422 53.711 52.738 55.02 52.453 54.918 cv
52.582 53.469 mo
52.738 53.504 52.836 53.504 52.988 53.785 cv
52.949 53.844 52.902 53.918 52.859 53.984 cv
52.719 53.984 li
52.641 53.902 52.562 53.832 52.5 53.762 cv
52.52 53.656 52.551 53.559 52.582 53.469 cv
52.816 52.641 mo
52.902 52.699 53.398 52.973 53.188 53.305 cv
52.879 53.066 52.672 52.961 52.816 52.641 cv
52.895 51.91 mo
53.121 51.992 53.254 52.086 53.461 52.43 cv
53.43 52.473 53.375 52.535 53.332 52.535 cv
53.109 52.32 52.816 52.109 52.895 51.91 cv
53.273 51.016 mo
53.453 51.086 53.535 51.086 53.625 51.48 cv
53.48 51.691 53.48 51.691 53.453 51.68 cv
53.336 51.582 53.223 51.496 53.102 51.41 cv
53.102 51.086 53.113 51.188 53.273 51.016 cv
53.363 50.328 mo
53.945 50.746 li
53.945 50.762 53.934 50.969 53.895 50.926 cv
53.66 50.828 53.441 50.73 53.223 50.633 cv
53.211 50.578 53.211 50.523 53.211 50.469 cv
53.262 50.414 53.312 50.371 53.363 50.328 cv
53.871 50.258 mo
53.375 49.641 li
53.816 48.844 53.98 50.375 53.871 50.258 cv
53.613 48.73 mo
53.73 48.711 53.859 48.691 53.992 48.691 cv
54.055 48.762 54.645 49.273 54.188 49.52 cv
53.68 49.203 53.762 49.078 53.613 48.73 cv
53.906 48.305 mo
53.949 48.191 53.996 48.086 54.055 47.988 cv
54.184 47.988 54.688 48.367 54.414 48.66 cv
54.242 48.539 54.066 48.41 53.906 48.305 cv
54.574 48.074 mo
54.383 47.914 54.188 47.77 53.992 47.625 cv
54.754 46.629 55.012 47.934 54.574 48.074 cv
54.449 46.469 mo
54.539 46.477 54.621 46.492 54.727 46.512 cv
54.781 46.633 54.727 47.152 54.594 47.008 cv
54.461 46.82 54.363 46.691 54.34 46.609 cv
54.375 46.562 54.406 46.512 54.449 46.469 cv
54.727 45.547 mo
54.871 45.734 55.207 46.035 55.207 46.426 cv
55.156 46.426 55.113 46.441 55.07 46.453 cv
54.793 46.383 54.617 46.152 54.473 46.008 cv
54.535 45.848 54.605 45.688 54.672 45.547 cv
cp
54.898 44.957 mo
55.035 45.023 55.172 45.105 55.309 45.188 cv
55.309 45.25 55.309 45.316 55.32 45.379 cv
55.293 45.363 55.262 45.363 55.23 45.363 cv
54.852 45.152 54.852 45.152 54.793 45.07 cv
54.824 45.023 54.852 44.988 54.898 44.957 cv
54.875 41.547 mo
54.977 41.652 55.074 41.758 55.172 41.875 cv
55.152 42.016 55.141 42.156 55.129 42.312 cv
55.074 42.312 55.023 42.312 54.977 42.324 cv
54.656 42.324 54.758 41.805 54.746 41.66 cv
54.789 41.613 54.832 41.578 54.875 41.547 cv
55.469 41.531 mo
55.195 41.281 55.16 41.227 55.098 40.977 cv
55.117 40.941 55.152 40.906 55.184 40.871 cv
55.293 40.883 55.406 40.906 55.527 40.93 cv
55.527 41.047 55.535 41.566 55.469 41.531 cv
55.625 42.312 mo
55.777 41.98 55.797 42.039 56.117 42.336 cv
56.117 42.395 56.117 42.395 56.02 42.559 cv
55.965 42.559 li
55.844 42.477 55.734 42.395 55.625 42.312 cv
55.93 40.738 mo
55.832 40.586 55.742 40.434 55.656 40.281 cv
55.918 39.559 56.172 40.609 55.93 40.738 cv
56.324 41.805 mo
56.215 41.875 56.215 41.875 56.207 41.852 cv
55.941 41.52 55.996 41.566 56.117 41.262 cv
56.184 41.262 56.359 41.594 56.324 41.805 cv
56.262 39.559 mo
56.293 39.652 56.359 39.785 56.391 39.988 cv
56.359 39.996 56.336 40.008 56.312 40.031 cv
56.117 39.82 56.207 39.691 56.262 39.559 cv
54.746 38.156 mo
55.16 37.602 56.215 37.211 56.719 38.023 cv
54.965 38.168 54.965 38.168 54.746 38.156 cv
50.918 38.418 mo
51.258 38.203 53.285 37.777 53.539 38.191 cv
52.66 38.379 51.84 38.547 51.027 38.617 cv
50.984 38.547 50.949 38.477 50.918 38.418 cv
50.633 37.469 mo
50.906 37.082 52.805 36.836 53.387 36.777 cv
53.703 37.117 li
52.719 37.578 51.695 37.555 50.742 37.613 cv
50.699 37.566 50.664 37.516 50.633 37.469 cv
53.789 36.016 mo
53.75 36.102 53.703 36.188 53.66 36.281 cv
52.879 36.316 li
52.859 36.352 52.848 36.387 52.836 36.422 cv
52.324 36.242 51.949 36.691 51.469 36.691 cv
50.754 36.656 50.754 36.656 50.645 36.621 cv
50.871 36.031 53.156 35.594 53.789 36.016 cv
54.195 36.41 mo
54.438 36.574 54.68 36.738 54.934 36.918 cv
54.934 37.176 li
54.68 37.367 54.438 37.555 54.195 37.754 cv
54.031 37.648 li
54.023 37.258 53.902 36.621 54.195 36.41 cv
56.664 36.031 mo
56.422 36.207 55.602 36.68 55.547 36.656 cv
55.152 36.434 54.758 36.207 54.375 35.996 cv
54.57 35.781 56.227 35.922 56.664 35.922 cv
cp
57.422 36.316 mo
57.422 36.492 57.391 37.434 57.227 37.258 cv
56.973 37.152 56.719 37.059 56.469 36.965 cv
56.457 36.879 56.445 36.797 56.445 36.727 cv
56.711 36.539 56.973 36.352 57.234 36.172 cv
57.289 36.223 57.355 36.266 57.422 36.316 cv
58.75 34.723 mo
58.52 34.816 58.289 34.91 58.07 35.004 cv
56.871 34.793 56.742 33.457 57.75 33.008 cv
57.75 32.609 57.75 32.207 57.762 31.805 cv
57.215 31.805 56.664 31.805 56.117 31.816 cv
55.5 33.352 52.793 30.871 55.414 30.32 cv
55.91 30.527 55.941 30.422 56.172 31.023 cv
56.699 31.023 57.227 31.023 57.762 31.035 cv
57.75 30.566 57.742 30.094 57.742 29.621 cv
55.414 28.688 60.035 26.219 58.848 29.5 cv
58.555 29.645 li
58.539 30.105 58.539 30.566 58.539 31.035 cv
58.98 31.023 59.434 31.023 59.879 31.023 cv
60.145 30.176 60.797 30.285 61.473 30.578 cv
62.086 32.242 60.504 32.891 59.938 31.816 cv
59.465 31.805 59 31.805 58.539 31.805 cv
58.539 32.215 58.539 32.645 58.555 33.066 cv
59.234 33.352 58.945 34.152 58.75 34.723 cv
58.453 36.352 mo
58.496 36.422 58.539 36.504 58.586 36.586 cv
58.496 36.68 58.375 36.809 58.289 36.809 cv
57.398 36.738 57.742 36.301 58.453 36.352 cv
58.531 37.672 mo
57.871 37.848 li
57.828 37.777 57.797 37.719 57.762 37.66 cv
57.848 37.613 58.672 37.211 58.531 37.672 cv
58.266 35.832 mo
58.125 35.77 57.992 35.723 57.859 35.676 cv
57.738 34.871 58.867 35.508 58.266 35.832 cv
59.254 38.391 mo
59.254 38.629 59.242 38.688 59.078 38.945 cv
58.344 38.945 57.621 38.945 56.895 38.961 cv
56.82 38.652 56.852 38.629 56.941 38.426 cv
57.477 38.379 58.75 38.121 59.254 38.391 cv
59.254 39.645 mo
59.156 39.621 59.066 39.609 58.98 39.598 cv
59.016 39.516 59.047 39.441 59.09 39.375 cv
59.199 39.418 59.344 39.691 59.254 39.645 cv
59.629 40.402 mo
59.258 40.266 59.027 40.094 59.086 39.879 cv
59.242 39.836 59.355 39.898 59.609 40.02 cv
59.465 40.215 59.668 40.402 59.629 40.402 cv
60.027 40.82 mo
59.992 40.82 59.973 40.84 59.953 40.859 cv
59.754 40.777 59.578 40.707 59.395 40.648 cv
59.43 40.59 59.465 40.531 59.504 40.492 cv
59.664 40.551 59.844 40.609 60.027 40.688 cv
cp
60.426 41.254 mo
60.414 41.301 60.398 41.348 60.398 41.41 cv
60.227 41.426 60.074 41.441 59.914 41.473 cv
59.398 41.102 li
59.398 40.766 60.352 41.207 60.426 41.254 cv
60.867 41.906 mo
60.816 42.012 li
60.512 42.012 60.211 42.012 59.922 42.027 cv
59.805 41.906 li
60.195 41.707 60.258 41.672 60.867 41.906 cv
61.102 42.398 mo
60.977 42.512 60.809 42.645 60.688 42.645 cv
60.578 42.578 60.473 42.512 60.383 42.461 cv
60.445 42.348 60.504 42.234 60.578 42.133 cv
60.688 42.133 60.871 42.246 61.102 42.398 cv
61.547 42.996 mo
61.383 43.113 61.281 43.223 61.109 43.223 cv
60.934 43.223 60.879 42.996 60.867 42.961 cv
61.121 42.832 61.176 42.711 61.527 42.805 cv
61.527 42.867 61.535 42.926 61.547 42.996 cv
62.098 43.586 mo
61.504 43.918 61.504 43.918 61.449 43.918 cv
61.195 43.703 61.242 43.703 61.383 43.516 cv
61.613 43.516 61.844 43.527 62.074 43.539 cv
62.074 43.551 62.086 43.562 62.098 43.586 cv
62.418 44.23 mo
62.156 44.336 61.73 44.543 61.598 44.543 cv
61.543 44.438 61.5 44.336 61.465 44.25 cv
61.832 44.125 62 44.004 62.418 44.23 cv
62.812 44.801 mo
62.801 44.879 62.789 44.973 62.789 45.066 cv
62.527 45.082 62.266 45.109 62.016 45.133 cv
61.953 45.055 61.891 44.988 61.828 44.922 cv
62.09 44.641 62.375 44.664 62.812 44.801 cv
63.203 45.711 mo
62.32 45.711 li
62.363 45.473 li
62.633 45.453 62.914 45.438 63.203 45.438 cv
cp
63.508 45.988 mo
63.367 46.086 63.367 46.086 62.895 46.258 cv
62.785 46.188 62.672 46.121 62.562 46.07 cv
62.812 45.988 63.082 45.969 63.508 45.988 cv
63.578 47.02 mo
63.402 46.926 63.227 46.832 63.062 46.734 cv
63.062 45.328 64.328 47.414 63.578 47.02 cv
64.262 47.172 mo
64.262 47.238 64.168 47.742 64.059 47.691 cv
63.793 47.59 63.652 47.457 63.562 47.371 cv
63.609 47.289 64.027 47.086 64.262 47.172 cv
64.812 48.297 mo
64.656 48.281 64.504 48.281 64.359 48.281 cv
64.25 48.195 64.152 48.117 64.055 48.043 cv
64.449 47.805 64.352 47.727 64.781 48.07 cv
64.781 48.148 64.793 48.227 64.812 48.297 cv
65.168 48.762 mo
64.98 48.801 64.793 48.852 64.625 48.906 cv
64.441 48.832 64.273 48.777 64.105 48.727 cv
64.141 48.633 64.188 48.543 64.238 48.473 cv
64.625 48.438 64.695 48.422 65.168 48.762 cv
64.695 49.609 mo
64.391 49.293 li
65.312 48.758 65.676 49.184 64.695 49.609 cv
65.672 49.473 mo
65.672 49.906 65.066 49.797 65.285 49.77 cv
65.215 49.75 64.957 49.84 64.898 49.816 cv
65.32 49.422 li
65.465 49.422 65.512 49.457 65.672 49.473 cv
66.117 50.254 mo
65.902 50.363 65.902 50.363 65.789 50.363 cv
65.242 50.184 65.242 50.184 65.211 50.133 cv
65.359 49.977 66.262 49.738 66.117 50.254 cv
66.484 50.668 mo
65.766 50.879 65.766 50.879 65.613 50.879 cv
65.566 50.828 65.523 50.781 65.477 50.75 cv
65.734 50.668 66.105 50.418 66.469 50.484 cv
66.469 50.539 66.469 50.598 66.484 50.668 cv
66.973 51.543 mo
66.484 51.473 66.234 51.363 66.004 51.188 cv
67.043 50.922 66.992 51.559 66.973 51.543 cv
66.578 51.969 mo
66.539 51.93 66.5 51.891 66.477 51.848 cv
66.855 51.711 66.91 51.645 67.402 51.859 cv
67.199 52.082 66.781 51.969 66.578 51.969 cv
67.066 53.586 mo
67.703 53.586 68.281 53.172 68.988 53.551 cv
68.879 54.219 69.223 54.855 69.027 55.613 cv
68.742 55.613 68.547 55.391 68.414 55.285 cv
68.414 55.203 li
68.637 55.012 68.645 55.004 68.988 54.98 cv
68.941 54.883 68.898 54.789 68.855 54.707 cv
68.426 54.625 67.945 54.543 67.648 54.719 cv
68.152 55.215 68.785 56.383 69.293 57.152 cv
69.457 57.137 69.621 57.137 69.785 57.137 cv
69.457 56.82 li
69.918 56.324 li
69.961 56.336 70.039 56.371 70.16 56.5 cv
69.828 57.305 70.117 57.469 69.348 57.977 cv
69.305 58.402 69.027 61.129 68.637 60.703 cv
67.855 59.711 67.297 58.531 66.332 59.734 cv
66.211 59.605 li
66.516 59.359 66.824 59.109 67.145 58.875 cv
67.023 58.766 66.902 58.676 66.793 58.582 cv
67.09 58.367 li
66.695 56.668 66.582 55.309 65.551 54.059 cv
65.23 53.82 63.887 52.863 63.809 52.699 cv
64.027 52.699 64.445 52.887 64.773 52.887 cv
64.113 50.363 62.328 47.918 61.922 45.699 cv
63.262 46.715 64.18 50.219 65.738 51.227 cv
65.727 51.305 65.719 51.391 65.719 51.484 cv
66.344 51.859 66.508 52.793 67.066 53.586 cv
69.172 56.145 mo
69.105 56.086 69.039 56.027 68.988 55.969 cv
69.039 55.781 69.062 55.805 69.281 55.875 cv
69.281 55.945 69.293 56.016 69.305 56.086 cv
69.203 56.137 69.25 56.145 69.172 56.145 cv
67.855 53.172 mo
67.68 53.207 67.504 53.258 67.34 53.305 cv
67.297 53.242 67.25 53.184 67.207 53.137 cv
67.328 53.055 67.449 52.973 67.582 52.898 cv
67.668 52.98 67.758 53.078 67.855 53.172 cv
69.863 49.605 mo
72.781 49.973 72.75 50.492 72.652 53.586 cv
72.484 55.023 71.629 55.781 70.391 55.992 cv
69.723 55.887 li
69.711 55.676 69.711 55.473 69.711 55.273 cv
69.887 55.188 70.059 55.109 70.234 55.035 cv
70.234 54.508 69.773 54.641 69.773 54.473 cv
70.234 53.977 70.914 54.895 70.766 53.902 cv
69.699 53.902 li
69.699 53.332 69.996 53.477 69.93 53.055 cv
69.379 53.02 68.844 52.992 68.305 52.973 cv
68.305 51.473 69.074 50.766 69.863 49.605 cv
75.27 50.715 mo
74.801 51.398 74.285 54.672 72.988 54.672 cv
72.957 54.672 li
72.957 50.941 73.668 49.727 70.008 49.227 cv
69.906 49.078 69.844 48.922 69.844 48.852 cv
71.312 47.906 75.844 48.484 77.465 49.043 cv
76.699 49.586 75.973 50.125 75.27 50.715 cv
77.938 53.148 mo
77.918 53.148 77.895 53.148 77.871 53.16 cv
77.629 52.844 77.488 52.57 77.379 52.32 cv
77.391 52.309 77.402 52.309 77.41 52.309 cv
77.5 52.414 78.047 52.844 77.938 53.148 cv
79.242 55.023 mo
79.242 54.73 li
79.113 54.656 78.992 54.586 78.871 54.527 cv
78.871 54.387 li
79.023 54.34 79.156 54.414 79.375 54.543 cv
79.277 55.402 78.957 55.473 78.309 55.758 cv
78.266 55.734 78.227 55.711 78.18 55.695 cv
78.887 54.031 78.395 55.48 79.242 55.023 cv
81.996 53.09 mo
82.172 55.391 79.23 55.922 78.309 57.719 cv
78.73 57.719 80.934 56.633 81.055 56.762 cv
79.988 57.625 78.582 58.98 77.27 59.156 cv
77.105 58.98 76.938 58.812 76.773 58.648 cv
76.422 58.898 75.594 61.66 75.594 62.176 cv
75.949 62.145 li
76.184 61.332 76.422 60.527 76.664 59.723 cv
76.938 59.762 77.223 59.793 77.512 59.844 cv
77.719 61.352 77.465 63.371 77.367 65.039 cv
77.16 65.215 76.16 66.051 75.973 65.957 cv
75.742 65.543 75.512 65.133 75.293 64.719 cv
75.789 64.27 76.324 63.75 76.797 63.242 cv
76.148 62.547 73.789 65.414 73.133 64.703 cv
73.988 62.723 75.527 58.105 76.895 56.266 cv
76.688 55.109 75.109 53.832 75.438 53.195 cv
76.004 53.504 77.125 54.578 77.73 54.543 cv
78.039 53.895 78.246 53.348 78.859 53.02 cv
78.969 53.078 79.078 53.137 79.199 53.207 cv
79.266 53.797 li
78.254 54.316 77.949 54.98 77.664 56.207 cv
78.926 57.02 79.805 54.094 79.969 54.094 cv
80.145 54.246 80.176 54.305 80.504 54.223 cv
80.648 53.656 80.273 53.539 80.648 53.137 cv
81 53.207 li
81 53.371 81 53.551 81.008 53.727 cv
81.348 53.488 81.492 53.359 81.723 52.973 cv
81.812 53.008 81.898 53.043 81.996 53.09 cv
76.699 55.012 mo
76.797 55.012 76.895 55.012 76.992 55.023 cv
76.938 54.48 75.984 53.715 75.656 53.715 cv
75.984 54.113 76.359 54.508 76.699 55.012 cv
76.918 64.66 mo
76.852 64.551 76.797 64.445 76.742 64.34 cv
76.258 64.41 76.227 64.41 76.039 64.895 cv
76.094 64.977 76.16 65.07 76.227 65.168 cv
76.422 65.168 76.785 64.883 76.918 64.66 cv
69.723 50.434 mo
69.723 50.75 li
70.598 50.742 71.477 50.727 72.355 50.727 cv
71.32 49.996 70.766 50.211 69.723 50.434 cv
69.668 51.32 mo
69.656 51.426 69.645 51.531 69.645 51.637 cv
70.117 51.602 70.234 51.289 70.523 51.812 cv
70.414 51.91 70.301 52.004 70.191 52.109 cv
70.234 52.191 70.281 52.285 70.324 52.379 cv
70.699 52.379 71.07 52.395 71.453 52.406 cv
71.453 52.145 li
71.191 52.109 li
71.004 51.801 71.125 51.707 71.199 51.484 cv
71.332 51.473 71.477 51.461 71.617 51.461 cv
71.617 51.199 li
70.621 50.965 70.531 51.023 69.668 51.32 cv
70.434 52.547 mo
70.355 52.652 70.301 52.715 70.301 52.914 cv
70.719 52.898 71.137 52.887 71.562 52.887 cv
71.18 52.77 70.805 52.652 70.434 52.547 cv
68.523 53.609 mo
68.438 53.75 68.352 53.895 68.273 54.043 cv
67.539 54.008 li
67.473 54.152 li
67.703 54.363 li
68.098 54.34 68.492 54.328 68.898 54.316 cv
68.602 53.609 li
cp
58.73 33.824 mo
58.004 32.383 56.742 33.965 58.09 34.449 cv
58.512 34.309 58.539 34.273 58.73 33.824 cv
58.73 28.914 mo
58.332 28.18 57.816 28.156 57.469 28.914 cv
57.641 29.293 57.59 29.277 58.09 29.469 cv
58.445 29.371 58.562 29.277 58.73 28.914 cv
60.133 31.402 mo
60.297 31.77 60.266 31.852 60.758 32.027 cv
62.184 31.652 60.711 29.879 60.133 31.402 cv
55.832 31.473 mo
55.832 30 53.613 31.379 55.25 32.027 cv
55.582 31.992 55.699 31.734 55.832 31.473 cv
50.664 50.305 mo
50.48 50.211 50.391 50.27 50.301 50.27 cv
50.227 50.055 50.148 49.855 50.082 49.656 cv
49.512 49.453 48.965 50.148 48.965 50.727 cv
49.062 50.633 49.16 50.539 49.262 50.457 cv
49.348 50.527 49.438 50.609 49.523 50.691 cv
49.523 50.801 49.359 50.965 49.273 51.086 cv
49.371 51.129 49.48 51.176 49.59 51.234 cv
50.051 50.977 50.301 50.742 50.664 50.305 cv
48.141 50.234 mo
48.594 50.234 49.438 49.395 49.973 49.109 cv
49.906 48.992 49.844 48.887 49.785 48.777 cv
49.012 48.688 48.418 49.594 48.141 50.234 cv
48.207 53.09 mo
47.086 51.414 46.969 51.262 46.926 49.43 cv
45.52 50.527 47.461 53.027 47.891 54.527 cv
47.891 54.543 47.891 54.551 47.898 54.566 cv
48.23 54.422 48.207 53.328 48.207 53.09 cv
49.449 58.84 mo
48.93 59.582 48.93 62.012 48.93 62.938 cv
48.941 62.938 48.953 62.938 48.977 62.945 cv
48.977 63.68 48.559 63.926 49.402 64.34 cv
49.426 64.34 49.457 64.34 49.492 64.352 cv
49.664 62.605 49.906 60.727 49.754 59.051 cv
49.645 58.98 49.547 58.91 49.449 58.84 cv
50.141 58.812 mo
50.16 60.703 50.082 62.734 50.301 64.703 cv
50.434 64.695 50.578 64.684 50.719 64.684 cv
50.598 62.723 50.48 60.762 50.367 58.812 cv
cp
50.578 58.723 mo
50.578 60.754 50.961 62.852 51.246 64.941 cv
51.348 64.988 51.453 65.047 51.562 65.105 cv
51.586 65.105 51.605 65.105 51.629 65.117 cv
51.469 62.938 51.312 60.719 50.797 58.676 cv
50.719 58.684 50.645 58.695 50.578 58.723 cv
42.34 54.98 mo
42.789 54.48 43.227 54.07 43.098 53.422 cv
42.668 53.645 42.469 54.457 42.328 54.941 cv
42.328 54.957 42.328 54.969 42.34 54.98 cv
40.594 53.328 mo
40.141 53.207 40.535 52.938 40.023 53.348 cv
40.102 53.441 40.188 53.539 40.277 53.633 cv
40.344 53.633 40.527 53.395 40.594 53.328 cv
45.367 74.008 mo
45.367 74.336 45.441 74.48 45.652 74.848 cv
45.75 74.773 45.859 74.719 45.969 74.656 cv
45.938 73.902 45.848 73.82 45.367 74.008 cv
57.773 74.801 mo
57.652 74.938 57.531 75.094 57.41 75.25 cv
57.543 75.363 57.676 75.496 57.816 75.625 cv
57.883 75.625 57.883 75.625 58.367 75.402 cv
58.41 75.234 58.301 74.988 58.301 74.977 cv
cp
66.23 75.129 mo
66.23 75.387 66.461 75.531 66.77 75.613 cv
66.914 75.59 67.055 75.578 67.199 75.566 cv
67.23 75.402 67.219 75.234 67.219 75.188 cv
66.836 75 66.516 74.938 66.23 75.129 cv
76.555 70.254 mo
76.656 69.863 76.566 69.875 76.391 69.652 cv
75.965 69.676 75.895 70.004 75.754 70.004 cv
75.875 70.137 75.996 70.277 76.117 70.418 cv
76.258 70.363 76.402 70.301 76.555 70.254 cv
75.27 68.836 mo
75.512 68.32 75.457 68.426 75.219 68.07 cv
74.711 68.07 li
74.621 68.211 74.547 68.363 74.473 68.52 cv
74.566 68.637 74.668 68.766 74.777 68.898 cv
74.941 68.871 75.109 68.848 75.27 68.836 cv
73.199 67.363 mo
73.254 67.195 73.309 67.043 73.363 66.891 cv
72.945 66.254 73 66.605 72.387 66.984 cv
72.484 67.098 72.582 67.234 72.684 67.363 cv
cp
70.871 56.973 mo
70.453 57.645 70.414 57.566 70.992 58.207 cv
71.191 58.184 71.398 58.223 71.605 58.215 cv
71.848 57.824 71.957 57.609 71.922 57.152 cv
71.434 56.902 71.344 56.926 70.871 56.973 cv
71.871 57.246 mo
71.828 57.609 71.785 57.766 71.562 58.082 cv
70.938 58.039 li
70.379 57.039 71.016 56.867 71.871 57.246 cv
71.707 57.328 mo
71.047 57.152 li
70.82 57.539 li
71.016 57.68 71.223 57.824 71.434 57.977 cv
71.5 57.977 li
71.684 57.68 71.707 57.609 71.707 57.328 cv
71.094 57.258 mo
71.277 57.293 71.469 57.34 71.652 57.387 cv
71.652 57.539 71.598 57.672 71.477 57.859 cv
71.422 57.859 li
70.93 57.504 li
cp
60.047 68.27 mo
59.977 68.426 59.914 68.59 59.859 68.754 cv
60.023 68.871 60.199 69.004 60.375 69.133 cv
60.516 69.133 60.805 68.969 61 68.898 cv
61 68.707 60.684 68.328 60.672 68.305 cv
cp
62.16 72.875 mo
61.996 72.922 61.832 72.98 61.68 73.043 cv
61.645 73.18 61.625 73.324 61.602 73.477 cv
61.711 73.582 61.82 73.703 61.941 73.82 cv
62.691 73.727 62.402 73.238 62.16 72.875 cv
58.324 70.844 mo
58.039 70.832 57.762 70.82 57.488 70.82 cv
57.453 70.977 57.453 71.078 57.453 71.316 cv
57.848 71.422 li
58.266 71.422 58.41 71.211 58.324 70.844 cv
52.156 67.574 mo
52.156 67.977 52.191 68.023 52.531 68.355 cv
52.672 68.355 52.957 68.059 53.102 67.941 cv
53.102 67.008 52.477 67.469 52.156 67.574 cv
50.141 69.426 mo
49.512 69.426 li
49.535 69.934 49.535 69.934 49.566 70.055 cv
49.676 70.098 49.676 70.098 49.973 70.137 cv
50.48 70.137 50.227 69.652 50.141 69.426 cv
52.707 72.273 mo
52.641 72.52 li
52.695 72.605 52.762 72.688 52.828 72.777 cv
53.012 72.777 53.199 72.793 53.387 72.805 cv
53.363 72.438 53.352 72.414 53.223 72.203 cv
cp
49.59 74.09 mo
49.73 74.078 49.73 74.078 50.301 73.902 cv
49.754 73.273 li
49.578 73.273 49.512 73.383 49.379 73.441 cv
49.379 73.938 li
49.449 73.984 49.512 74.035 49.59 74.09 cv
44.629 71.316 mo
44.336 71.188 44.324 71.258 44.105 71.328 cv
44.082 71.66 44.203 71.801 44.414 72.164 cv
44.918 71.988 44.742 71.812 44.629 71.316 cv
45.137 69.723 mo
45.137 69.996 45.234 70.113 45.422 70.418 cv
45.52 70.363 45.629 70.301 45.738 70.254 cv
45.738 69.664 45.582 69.531 45.137 69.723 cv
43.27 66.453 mo
43.305 66.855 43.352 66.914 43.664 67.328 cv
43.766 67.27 43.875 67.211 43.984 67.16 cv
43.984 66.395 43.875 66.219 43.27 66.453 cv
45.785 65.27 mo
46.188 64.754 46.18 64.836 45.914 64.41 cv
45.77 64.398 45.641 64.398 45.508 64.398 cv
45.289 64.906 45.254 64.777 45.562 65.27 cv
cp
50.145 56.359 mo
50.336 56.445 50.422 56.699 50.27 57.152 cv
50.184 57.188 50.105 57.223 50.027 57.266 cv
49.512 57.211 49.414 56.914 49.48 56.5 cv
49.637 56.395 49.797 56.336 49.934 56.324 cv
49.797 56.316 49.637 56.336 49.449 56.395 cv
49.297 56.902 49.438 57.266 49.984 57.352 cv
50.586 57.191 50.656 56.523 50.145 56.359 cv
49.934 56.324 mo
50.012 56.328 50.086 56.34 50.145 56.359 cv
50.086 56.332 50.016 56.32 49.934 56.324 cv
74.109 75.316 mo
75.262 75.105 76.555 74.336 77.512 73.512 cv
75.555 72.875 73.867 72.051 72.09 71.223 cv
70.961 70.312 68.723 68.719 67.363 68.719 cv
68.152 71.27 71.84 74.668 74.109 75.316 cv
68.523 69.805 mo
68.273 69.496 67.891 69.191 67.812 69.027 cv
68.875 69.027 70.879 70.637 71.629 71.109 cv
72.16 71.445 72.277 71.527 72.938 71.848 cv
74.363 72.234 75.605 73.426 77.211 73.535 cv
76.516 73.488 74.859 74.758 74.188 74.758 cv
73.43 74.676 71.598 73.867 71.465 73.371 cv
70.402 71.941 68.863 71.672 68.523 69.805 cv
45.312 76.887 mo
43.656 77.102 42.031 77.551 40.605 78.34 cv
40.605 78.434 40.727 78.551 40.824 78.695 cv
41.746 78.504 44.105 77.574 44.961 77.75 cv
45.75 78.648 46.34 79.18 47.375 79.922 cv
49.469 80.668 50.293 78.457 51.762 78.457 cv
54.934 81.871 54.711 80.348 58.512 78.754 cv
58.555 78.742 61.262 80.746 62.59 80.867 cv
64.07 80.762 64.973 79.426 66.43 79.426 cv
69.379 80.68 69.82 80.5 72.527 78.754 cv
74.117 78.293 75.965 79.617 78.016 78.918 cv
77.992 78.859 77.969 78.812 77.949 78.766 cv
76.016 78.543 74.043 77.809 72.199 77.871 cv
70.312 79.484 69.094 80.43 66.922 78.906 cv
66.934 78.883 66.945 78.871 66.957 78.859 cv
66.945 78.848 66.934 78.836 66.934 78.824 cv
66.891 78.824 66.848 78.824 66.812 78.836 cv
65.988 77.953 65.859 78.305 64.984 78.773 cv
62.785 80.867 61.219 80.516 59.387 78.305 cv
57.203 76.676 55.965 81.609 52.895 78.801 cv
51.562 77.312 51.785 77.395 50.027 78.566 cv
47.562 79.934 46.945 78.754 45.312 76.887 cv
42.457 80.148 mo
45.465 79.676 44.301 79.039 46.988 81.043 cv
48.789 81.941 49.512 80.926 51.434 80.57 cv
52.828 81.762 54.504 82.105 56.367 82 cv
58.992 80.402 58.105 80.582 60.449 82.379 cv
60.684 82.496 61.031 82.484 61.328 82.695 cv
63.094 82.695 63.859 82.566 65.387 81.492 cv
67 80.711 68.711 82.484 71.035 81.527 cv
72.926 80.652 73.77 80.879 75.844 80.832 cv
75.832 80.668 75.82 80.5 75.82 80.348 cv
72.605 79.781 72.957 79.227 70.488 80.961 cv
68.281 81.93 66.902 79.852 65.07 80.688 cv
61.449 83.344 61.449 80.773 58.16 80.109 cv
55.91 81.199 55.395 81.66 53 80.629 cv
52.539 80.312 51.75 79.617 51.379 79.543 cv
48.711 80.617 48.254 81.48 45.926 79.637 cv
44.918 78.918 42.68 78.492 42.457 80.148 cv
48.668 82.297 mo
48.734 82.426 48.801 82.555 48.875 82.695 cv
49.469 82.695 49.82 82.66 50.469 82.438 cv
50.488 82.461 50.512 82.484 50.531 82.52 cv
52.203 82.52 52.453 82.934 54.066 83.402 cv
55.371 83.676 56.863 82.859 58.211 82.73 cv
59.824 83.344 60.254 83.688 62.238 83.914 cv
63.488 83.875 64.258 83.746 65.441 83.086 cv
66.77 82.473 67.176 83.453 68.898 83.156 cv
68.953 83.039 69.008 82.934 69.074 82.824 cv
67.922 82.426 65.586 81.281 64.836 82.66 cv
63.457 83.344 61.82 83.383 60.406 83.086 cv
59.562 82.695 59.023 82 58.199 82 cv
56.93 82.332 54.703 83.395 53.574 82.414 cv
50.992 81.148 51.367 81.363 48.668 82.297 cv
56.039 84.113 mo
56.008 84.219 55.953 84.445 55.855 84.551 cv
56.281 85.246 57.566 84.434 58.016 84.184 cv
58.715 84.184 59.449 84.586 60.242 84.883 cv
60.32 84.848 60.406 84.645 60.461 84.539 cv
58.73 83.168 58.023 83.711 56.039 84.113 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
48.277 87.227 mo
48.68 87.355 49.086 87.539 49.383 87.738 cv
48.98 89.004 li
48.48 88.844 li
48.441 88.613 48.426 88.348 48.441 88.152 cv
48.32 88.035 48.113 87.898 47.84 87.812 cv
47.496 87.703 47.168 87.742 47.047 88.113 cv
46.766 89 48.984 89.344 48.527 90.785 cv
48.289 91.527 47.445 91.895 46.277 91.52 cv
45.934 91.41 45.531 91.227 45.25 91.066 cv
45.641 89.852 li
46.133 90.008 li
46.172 90.246 46.191 90.531 46.172 90.719 cv
46.254 90.797 46.465 90.906 46.645 90.965 cv
47.023 91.086 47.305 90.992 47.41 90.668 cv
47.668 89.863 45.441 89.43 45.891 88.023 cv
46.141 87.25 47.047 86.836 48.277 87.227 cv
f
44.641 85.93 mo
44.438 86.293 li
44.219 86.309 43.977 86.301 43.758 86.254 cv
42.234 88.977 li
42.379 89.125 42.527 89.336 42.629 89.527 cv
42.43 89.883 li
40.422 88.762 li
40.621 88.406 li
40.836 88.395 41.094 88.406 41.297 88.449 cv
42.82 85.727 li
42.664 85.566 42.531 85.367 42.43 85.168 cv
42.633 84.809 li
cp
f
36.93 82.191 mo
37.863 81.227 li
38.438 81.402 39.031 81.734 39.547 82.234 cv
40.574 83.23 40.598 84.5 39.668 85.461 cv
38.629 86.531 37.223 86.52 36.027 85.363 cv
35.68 85.023 35.332 84.605 35.086 84.219 cv
36.016 83.258 li
36.398 83.629 li
36.344 83.855 36.254 84.078 36.148 84.266 cv
36.262 84.492 36.438 84.742 36.695 84.992 cv
37.344 85.621 38.117 85.414 38.746 84.762 cv
39.355 84.137 39.484 83.293 38.797 82.629 cv
38.648 82.484 38.488 82.352 38.328 82.266 cv
37.688 82.93 li
37.77 83.074 37.824 83.281 37.867 83.461 cv
37.594 83.746 li
36.199 82.398 li
36.477 82.109 li
36.617 82.121 36.777 82.141 36.93 82.191 cv
f
36.871 79.234 mo
36.52 79.449 li
36.316 79.359 36.113 79.234 35.945 79.082 cv
33.285 80.715 li
33.34 80.914 33.359 81.172 33.355 81.387 cv
33.008 81.602 li
31.809 79.641 li
32.156 79.426 li
32.348 79.523 32.57 79.66 32.723 79.797 cv
35.383 78.168 li
35.328 77.949 35.305 77.711 35.316 77.488 cv
35.672 77.273 li
cp
f
34.777 75.512 mo
34.391 75.66 li
34.219 75.539 34.035 75.379 33.895 75.191 cv
30.977 76.297 li
30.992 76.504 30.969 76.77 30.922 76.973 cv
30.543 77.117 li
29.727 74.969 li
30.105 74.824 li
30.277 74.945 30.473 75.137 30.594 75.293 cv
33.574 74.164 li
33.191 73.219 li
33 73.234 32.707 73.234 32.453 73.219 cv
32.266 72.727 li
33.539 72.246 li
cp
f
33.035 70.379 mo
32.629 70.465 li
32.48 70.316 32.324 70.129 32.211 69.926 cv
29.16 70.562 li
29.145 70.77 29.078 71.027 29 71.223 cv
28.602 71.305 li
28.133 69.055 li
28.531 68.969 li
28.68 69.117 28.844 69.336 28.938 69.512 cv
32.059 68.859 li
31.828 67.867 li
31.637 67.852 31.348 67.805 31.098 67.75 cv
30.992 67.238 li
32.324 66.961 li
cp
f
27.871 61.238 mo
29.895 61.074 li
31.137 60.973 31.84 61.703 31.941 62.879 cv
32.066 64.305 31.379 64.859 30.379 64.945 cv
28.203 65.133 li
28.16 65.281 28.043 65.473 27.953 65.594 cv
27.547 65.629 li
27.375 63.605 li
27.777 63.574 li
27.902 63.723 28.039 63.895 28.113 64.07 cv
30.113 63.898 li
30.867 63.832 31.289 63.531 31.219 62.73 cv
31.164 62.082 30.75 61.789 30.07 61.855 cv
27.941 62.066 li
27.906 62.25 27.781 62.453 27.695 62.613 cv
27.293 62.648 li
27.137 60.855 li
27.543 60.82 li
27.652 60.93 27.805 61.094 27.871 61.238 cv
f
31.648 54.074 mo
31.234 54.066 li
31.113 53.93 30.984 53.746 30.953 53.586 cv
28.348 53.961 li
28.348 53.969 li
31.629 55.191 li
31.617 55.93 li
28.25 57.086 li
28.25 57.094 li
30.867 57.414 li
30.945 57.23 31.062 57.074 31.184 56.941 cv
31.598 56.949 li
31.566 58.633 li
31.152 58.629 li
31.055 58.516 30.949 58.383 30.867 58.25 cv
27.75 57.672 li
27.672 57.863 27.559 58.043 27.449 58.211 cv
27.043 58.203 li
27.074 56.418 li
30.074 55.344 li
30.074 55.328 li
27.117 54.191 li
27.148 52.41 li
27.562 52.418 li
27.66 52.586 27.773 52.762 27.836 52.969 cv
30.977 52.43 li
31.043 52.305 31.152 52.172 31.273 52.07 cv
31.688 52.078 li
cp
f
30.102 48.773 mo
30.059 49.113 29.75 49.348 29.395 49.305 cv
29.039 49.262 28.793 48.961 28.832 48.621 cv
28.875 48.281 29.188 48.039 29.539 48.082 cv
29.895 48.125 30.141 48.434 30.102 48.773 cv
f
29.699 40.98 mo
31.672 41.461 li
32.883 41.762 33.316 42.676 33.043 43.82 cv
32.711 45.215 31.883 45.523 30.91 45.289 cv
28.785 44.777 li
28.695 44.906 28.523 45.051 28.402 45.137 cv
28.008 45.043 li
28.48 43.07 li
28.875 43.164 li
28.941 43.344 29.02 43.551 29.035 43.742 cv
30.988 44.211 li
31.723 44.387 32.219 44.234 32.406 43.453 cv
32.559 42.82 32.254 42.41 31.594 42.262 cv
29.504 41.785 li
29.414 41.949 29.23 42.102 29.102 42.227 cv
28.707 42.133 li
29.125 40.383 li
29.52 40.477 li
29.59 40.617 29.684 40.82 29.699 40.98 cv
f
32.93 33.422 mo
36.367 35.172 li
35.938 36.016 li
31.887 36.535 li
34.293 37.605 li
34.43 37.48 34.605 37.371 34.809 37.254 cv
35.176 37.441 li
34.301 39.164 li
33.93 38.977 li
33.91 38.742 33.895 38.512 33.922 38.328 cv
31.168 36.883 li
31.016 37.039 30.82 37.168 30.625 37.293 cv
30.262 37.109 li
31.078 35.508 li
34.695 35.043 li
32.59 34.09 li
32.461 34.219 32.281 34.316 32.098 34.398 cv
31.734 34.215 li
32.504 32.703 li
32.867 32.891 li
32.902 33.078 32.938 33.246 32.93 33.422 cv
f
38.023 32.875 mo
37.719 32.594 li
37.75 32.375 37.812 32.145 37.91 31.938 cv
35.605 29.84 li
35.426 29.945 35.184 30.039 34.977 30.094 cv
34.676 29.82 li
36.227 28.121 li
36.527 28.395 li
36.488 28.609 36.418 28.855 36.328 29.043 cv
38.633 31.145 li
38.828 31.031 39.051 30.945 39.266 30.895 cv
39.574 31.172 li
cp
f
42.941 24.047 mo
43.676 28.141 li
42.84 28.648 li
39.527 26.121 li
39.395 26.133 39.238 26.094 39.086 26.07 cv
38.875 25.723 li
40.578 24.684 li
40.793 25.031 li
40.719 25.199 40.637 25.359 40.523 25.523 cv
42.852 27.34 li
42.867 27.332 li
42.188 24.508 li
42.023 24.543 41.797 24.523 41.629 24.52 cv
41.414 24.172 li
42.871 23.285 li
43.082 23.633 li
43.047 23.762 43.016 23.926 42.941 24.047 cv
f
47.395 26.336 mo
47.281 25.938 li
47.418 25.785 47.59 25.605 47.789 25.48 cv
46.938 22.488 li
46.727 22.48 46.461 22.418 46.266 22.367 cv
46.152 21.977 li
49.461 21.035 li
49.773 22.137 li
49.277 22.281 li
49.152 22.168 48.973 21.969 48.891 21.82 cv
47.941 22.09 li
48.301 23.359 li
49.082 23.137 li
49.09 22.996 49.156 22.84 49.199 22.734 cv
49.613 22.617 li
49.965 23.859 li
49.551 23.977 li
49.465 23.898 49.309 23.789 49.238 23.68 cv
48.457 23.902 li
48.848 25.281 li
49.797 25.012 li
49.793 24.816 49.836 24.57 49.883 24.383 cv
50.387 24.238 li
50.715 25.391 li
cp
f
57.512 24.543 mo
57.453 24.055 li
56.848 24.191 56.777 22.531 55.996 22.484 cv
56.586 22.266 56.914 21.828 56.863 21.273 cv
56.789 20.398 56.137 20.09 54.988 20.188 cv
54.352 20.246 53.602 20.344 53.422 20.359 cv
52.855 20.41 li
52.895 20.812 li
53.086 20.906 53.309 21.004 53.527 21.051 cv
53.801 24.156 li
53.578 24.246 53.367 24.379 53.219 24.508 cv
53.254 24.922 li
55.395 24.734 li
55.359 24.32 li
55.215 24.234 55.027 24.117 54.848 24.066 cv
54.746 22.91 li
55 22.887 li
55.777 22.82 55.766 24.77 56.797 24.68 cv
57.043 24.656 57.316 24.617 57.512 24.543 cv
55.059 22.258 mo
54.691 22.289 li
54.57 20.898 li
54.648 20.879 54.789 20.855 54.855 20.852 cv
55.449 20.797 55.758 21.031 55.797 21.5 cv
55.832 21.883 55.629 22.207 55.059 22.258 cv
f
61.273 24.703 mo
60.852 24.684 60.41 24.613 60.07 24.496 cv
60.133 23.172 li
60.656 23.195 li
60.754 23.406 60.836 23.66 60.875 23.855 cv
61.023 23.934 61.258 24.012 61.543 24.027 cv
61.902 24.043 62.211 23.914 62.227 23.527 cv
62.27 22.598 60.039 22.844 60.105 21.336 cv
60.145 20.555 60.863 19.98 62.09 20.039 cv
62.445 20.055 62.883 20.125 63.195 20.207 cv
63.137 21.484 li
62.621 21.461 li
62.52 21.238 62.426 20.969 62.395 20.785 cv
62.297 20.73 62.066 20.68 61.875 20.668 cv
61.477 20.652 61.23 20.812 61.215 21.152 cv
61.176 22 63.438 21.84 63.371 23.312 cv
63.332 24.125 62.562 24.762 61.273 24.703 cv
f
65.734 25 mo
65.809 24.59 li
66.012 24.5 66.242 24.434 66.469 24.406 cv
67.023 21.336 li
66.84 21.246 66.633 21.09 66.473 20.941 cv
66.547 20.543 li
68.809 20.953 li
68.734 21.352 li
68.535 21.434 68.285 21.508 68.082 21.531 cv
67.523 24.598 li
67.723 24.703 67.914 24.848 68.074 25.004 cv
68 25.41 li
cp
f
74.957 24.383 mo
74.941 24.137 74.926 23.809 74.957 23.582 cv
74.246 23.301 li
73.066 26.266 li
73.242 26.391 73.402 26.59 73.535 26.773 cv
73.379 27.16 li
71.234 26.309 li
71.387 25.922 li
71.621 25.879 71.867 25.844 72.078 25.871 cv
73.258 22.906 li
72.547 22.621 li
72.422 22.805 72.168 23.055 71.996 23.207 cv
71.539 23.023 li
72.043 21.754 li
75.926 23.297 li
75.422 24.57 li
cp
f
80.961 26.562 mo
80.051 25.852 li
76.527 28.02 li
76.387 27.992 76.207 27.977 76.051 27.984 cv
75.797 28.309 li
77.121 29.344 li
77.375 29.016 li
77.328 28.855 77.273 28.684 77.176 28.523 cv
77.648 28.242 li
78.934 29.246 li
78.773 29.773 li
78.602 29.723 78.41 29.699 78.242 29.691 cv
77.984 30.02 li
79.559 31.25 li
79.816 30.922 li
79.797 30.793 79.746 30.637 79.691 30.488 cv
cp
79.789 26.809 mo
79.715 26.992 79.637 27.184 79.57 27.395 cv
79.152 28.68 li
78.137 27.887 li
79.316 27.145 li
79.492 27.031 79.648 26.91 79.781 26.805 cv
cp
f
85.398 33.77 mo
85.523 33.555 85.691 33.273 85.844 33.102 cv
85.41 32.473 li
82.785 34.293 li
82.859 34.492 82.887 34.746 82.891 34.973 cv
82.551 35.211 li
81.234 33.312 li
81.578 33.078 li
81.793 33.168 82.016 33.277 82.176 33.418 cv
84.801 31.598 li
84.367 30.969 li
84.16 31.051 83.812 31.117 83.582 31.152 cv
83.301 30.746 li
84.426 29.969 li
86.809 33.398 li
85.684 34.18 li
cp
f
84.102 38.152 mo
84.484 38 li
84.668 38.121 84.848 38.281 84.992 38.457 cv
87.887 37.297 li
87.867 37.09 87.891 36.836 87.93 36.621 cv
88.305 36.469 li
89.16 38.605 li
88.785 38.758 li
88.609 38.629 88.414 38.457 88.285 38.297 cv
85.391 39.453 li
85.406 39.68 85.387 39.918 85.34 40.133 cv
84.957 40.289 li
cp
f
85.918 43.973 mo
85.824 43.562 85.773 43.117 85.797 42.762 cv
87.09 42.469 li
87.207 42.98 li
87.027 43.125 86.809 43.273 86.633 43.363 cv
86.594 43.527 86.578 43.777 86.645 44.055 cv
86.723 44.402 86.93 44.668 87.309 44.582 cv
88.215 44.375 87.383 42.289 88.855 41.953 cv
89.613 41.781 90.359 42.32 90.633 43.516 cv
90.711 43.863 90.758 44.301 90.766 44.629 cv
89.52 44.91 li
89.402 44.406 li
89.59 44.25 89.824 44.09 89.996 44.012 cv
90.02 43.898 90.012 43.664 89.969 43.477 cv
89.879 43.09 89.656 42.895 89.324 42.973 cv
88.5 43.16 89.258 45.297 87.816 45.625 cv
87.023 45.805 86.203 45.23 85.918 43.973 cv
f
88.832 48.773 mo
88.793 48.434 89.039 48.133 89.395 48.09 cv
89.75 48.047 90.062 48.281 90.102 48.621 cv
90.145 48.961 89.895 49.27 89.539 49.312 cv
89.188 49.355 88.875 49.113 88.832 48.773 cv
f
87.188 51.988 mo
87.598 51.969 li
87.723 52.141 87.848 52.352 87.926 52.57 cv
91.039 52.438 li
91.09 52.238 91.195 51.992 91.305 51.812 cv
91.711 51.797 li
91.809 54.094 li
91.402 54.109 li
91.277 53.941 91.152 53.699 91.086 53.512 cv
87.902 53.645 li
87.973 54.664 li
88.156 54.711 88.434 54.805 88.672 54.895 cv
88.691 55.422 li
87.332 55.48 li
cp
f
91.004 62.008 mo
88.973 61.918 li
87.73 61.855 87.125 61.043 87.176 59.863 cv
87.234 58.434 87.984 57.973 88.988 58.012 cv
91.168 58.105 li
91.234 57.965 91.371 57.785 91.477 57.68 cv
91.883 57.695 li
91.797 59.723 li
91.391 59.707 li
91.289 59.543 91.176 59.355 91.125 59.172 cv
89.117 59.086 li
88.363 59.055 87.906 59.297 87.871 60.102 cv
87.844 60.754 88.219 61.094 88.898 61.117 cv
91.039 61.184 li
91.098 61 91.246 60.816 91.352 60.668 cv
91.758 60.688 li
91.684 62.484 li
91.277 62.469 li
91.18 62.344 91.047 62.164 91.004 62.008 cv
f
91.398 65.301 mo
90.996 65.234 li
90.852 65.406 90.695 65.613 90.609 65.793 cv
87.531 65.277 li
87.5 65.055 87.43 64.824 87.336 64.621 cv
86.926 64.555 li
86.824 65.168 li
86.723 65.77 86.617 66.309 86.555 66.688 cv
86.293 68.23 86.945 68.93 87.629 69.047 cv
88.121 69.129 88.645 68.867 88.844 68.191 cv
88.891 68.758 89.234 69.055 89.652 69.125 cv
90.391 69.25 90.852 68.762 91.047 67.594 cv
91.145 67.012 91.234 66.285 91.297 65.898 cv
cp
88.668 66.531 mo
88.602 66.926 li
88.484 67.605 88.184 68 87.727 67.922 cv
87.34 67.859 87.051 67.543 87.152 66.938 cv
87.195 66.664 87.266 66.449 87.34 66.309 cv
cp
90.523 66.844 mo
90.516 67.004 90.492 67.145 90.457 67.34 cv
90.359 67.93 90.035 68.094 89.66 68.031 cv
89.285 67.965 89.039 67.715 89.152 67.055 cv
89.176 66.891 89.203 66.742 89.23 66.625 cv
cp
f
85.695 70.859 mo
86.09 70.992 li
86.137 71.191 86.184 71.434 86.176 71.668 cv
89.125 72.664 li
89.25 72.496 89.453 72.312 89.602 72.18 cv
89.988 72.309 li
88.887 75.566 li
87.801 75.199 li
87.969 74.711 li
88.129 74.672 88.395 74.637 88.566 74.652 cv
88.883 73.715 li
87.633 73.293 li
87.371 74.062 li
87.48 74.152 87.574 74.289 87.637 74.387 cv
87.5 74.797 li
86.273 74.379 li
86.41 73.973 li
86.527 73.945 86.707 73.879 86.836 73.883 cv
87.098 73.113 li
85.738 72.652 li
85.422 73.586 li
85.586 73.695 85.762 73.871 85.891 74.016 cv
85.723 74.512 li
84.59 74.129 li
cp
f
82.441 78.129 mo
83.23 76.82 84.297 76.543 85.492 77.266 cv
86.891 78.109 87.121 79.43 86.391 80.637 cv
86.121 81.086 85.844 81.414 85.605 81.648 cv
84.328 80.875 li
84.605 80.414 li
84.863 80.438 85.145 80.504 85.355 80.586 cv
85.504 80.5 85.668 80.328 85.789 80.125 cv
86.148 79.531 85.891 78.883 85.031 78.363 cv
84.215 77.871 83.504 78.016 82.973 78.898 cv
82.805 79.176 82.668 79.531 82.629 79.867 cv
82.008 79.66 li
81.992 79.176 82.141 78.625 82.441 78.129 cv
f
80.398 81.105 mo
80.684 81.406 li
80.629 81.605 80.559 81.844 80.441 82.047 cv
82.578 84.309 li
82.766 84.219 83.031 84.152 83.227 84.105 cv
83.508 84.398 li
81.004 86.762 li
80.219 85.926 li
80.594 85.574 li
80.754 85.613 81.008 85.707 81.152 85.801 cv
81.867 85.125 li
80.965 84.164 li
80.371 84.723 li
80.43 84.852 80.445 85.02 80.457 85.133 cv
80.141 85.43 li
79.254 84.488 li
79.566 84.191 li
79.68 84.223 79.871 84.25 79.984 84.312 cv
80.578 83.754 li
79.59 82.711 li
78.875 83.387 li
78.969 83.559 79.043 83.797 79.086 83.984 cv
78.703 84.344 li
77.883 83.477 li
cp
f
73.805 90.203 mo
72.109 86.734 li
72.961 86.32 li
76.512 88.34 li
75.234 86.039 li
75.047 86.055 74.844 86.035 74.609 86.012 cv
74.426 85.641 li
76.164 84.789 li
76.348 85.16 li
76.223 85.359 76.094 85.551 75.961 85.68 cv
77.293 88.492 li
77.512 88.461 77.746 88.477 77.977 88.492 cv
78.156 88.855 li
76.539 89.648 li
73.371 87.848 li
74.477 89.871 li
74.66 89.848 74.863 89.879 75.059 89.922 cv
75.238 90.285 li
73.715 91.031 li
73.535 90.664 li
73.621 90.496 73.695 90.34 73.805 90.203 cv
f
68.367 87.734 mo
68.777 87.641 69.227 87.594 69.582 87.617 cv
69.867 88.914 li
69.355 89.027 li
69.211 88.844 69.062 88.625 68.973 88.449 cv
68.809 88.406 68.562 88.395 68.281 88.457 cv
67.934 88.535 67.668 88.738 67.754 89.117 cv
67.953 90.023 70.047 89.203 70.375 90.68 cv
70.543 91.441 69.996 92.18 68.801 92.445 cv
68.449 92.523 68.012 92.57 67.688 92.574 cv
67.41 91.328 li
67.918 91.215 li
68.07 91.402 68.23 91.637 68.309 91.809 cv
68.422 91.832 68.652 91.824 68.84 91.781 cv
69.23 91.695 69.426 91.473 69.352 91.145 cv
69.168 90.316 67.027 91.062 66.707 89.621 cv
66.531 88.828 67.109 88.012 68.367 87.734 cv
f
64.258 88.527 mo
64.289 88.941 li
64.117 89.082 63.91 89.207 63.703 89.289 cv
63.953 92.398 li
64.156 92.441 64.395 92.539 64.59 92.641 cv
64.621 93.043 li
62.328 93.23 li
62.297 92.824 li
62.469 92.695 62.688 92.559 62.883 92.484 cv
62.633 89.375 li
62.414 89.328 62.188 89.234 61.996 89.125 cv
61.965 88.711 li
cp
f
58.355 88.672 mo
58.777 88.68 59.223 88.742 59.562 88.848 cv
59.531 90.176 li
59.004 90.164 li
58.906 89.953 58.816 89.703 58.773 89.512 cv
58.625 89.434 58.387 89.359 58.102 89.352 cv
57.742 89.344 57.438 89.477 57.43 89.867 cv
57.406 90.797 59.633 90.504 59.598 92.012 cv
59.578 92.793 58.871 93.379 57.645 93.352 cv
57.289 93.34 56.852 93.281 56.535 93.207 cv
56.566 91.93 li
57.082 91.941 li
57.188 92.16 57.285 92.43 57.32 92.609 cv
57.426 92.664 57.652 92.711 57.844 92.715 cv
58.242 92.727 58.484 92.559 58.492 92.219 cv
58.516 91.371 56.258 91.582 56.293 90.105 cv
56.312 89.293 57.066 88.637 58.355 88.672 cv
f
52.664 90.281 mo
53.004 90.332 53.23 90.648 53.184 91 cv
53.129 91.355 52.82 91.594 52.484 91.547 cv
52.145 91.496 51.91 91.18 51.961 90.824 cv
52.012 90.473 52.328 90.234 52.664 90.281 cv
f
110.012 62.695 mo
110.012 58.062 li
108.559 58.062 li
108.559 62.777 li
108.559 63.871 107.973 64.473 106.863 64.473 cv
105.652 64.473 105.066 63.906 105.066 62.777 cv
105.066 58.062 li
103.625 58.062 li
103.625 62.695 li
103.625 64.094 103.875 64.727 104.66 65.27 cv
105.238 65.66 105.859 65.824 106.816 65.824 cv
107.766 65.824 108.41 65.648 108.961 65.27 cv
109.758 64.715 110.012 64.094 110.012 62.695 cv
119.668 65.742 mo
119.668 58.062 li
118.293 58.062 li
118.293 63.711 li
118.227 63.574 li
118.156 63.375 li
118.145 63.355 118.121 63.309 118.086 63.227 cv
118.051 63.148 118.02 63.09 118.008 63.066 cv
114.812 58.062 li
113.141 58.062 li
113.141 65.672 li
114.523 65.672 li
114.523 60.09 li
114.559 60.219 114.582 60.262 114.625 60.355 cv
114.641 60.367 114.672 60.426 114.719 60.516 cv
114.812 60.68 114.859 60.781 114.879 60.816 cv
118.145 65.742 li
cp
124.348 58.062 mo
122.895 58.062 li
122.895 65.672 li
124.348 65.672 li
cp
133.227 58.062 mo
131.703 58.062 li
130.043 63.203 li
129.996 63.297 li
129.973 63.355 129.961 63.391 129.961 63.492 cv
129.973 63.574 li
129.938 63.434 li
129.914 63.309 li
129.891 63.203 li
128.148 58.062 li
126.559 58.062 li
129.383 65.891 li
130.398 65.891 li
cp
140.262 65.672 mo
140.262 64.438 li
136.93 64.438 li
136.93 62.41 li
139.535 62.41 li
139.535 61.176 li
136.93 61.176 li
136.93 59.293 li
140.113 59.293 li
140.113 58.062 li
135.477 58.062 li
135.477 65.672 li
cp
148.465 65.672 mo
146.574 62.41 li
147.207 62.234 147.473 62.074 147.762 61.703 cv
148.039 61.336 148.176 60.863 148.176 60.273 cv
148.176 59.559 147.969 59.008 147.555 58.625 cv
147.105 58.199 146.598 58.062 145.488 58.062 cv
142.953 58.062 li
142.953 65.672 li
144.406 65.672 li
144.406 62.629 li
145.133 62.629 li
146.875 65.672 li
cp
146.676 60.309 mo
146.676 61.07 146.273 61.395 145.352 61.395 cv
144.406 61.395 li
144.406 59.293 li
145.352 59.293 li
146.297 59.293 146.676 59.582 146.676 60.309 cv
155.84 58.566 mo
155.332 58.324 155.125 58.246 154.754 58.129 cv
154.281 57.992 153.832 57.934 153.324 57.934 cv
152.438 57.934 151.965 58.062 151.41 58.441 cv
151.168 58.613 150.973 58.809 150.844 59.008 cv
150.66 59.293 150.543 59.688 150.543 60.066 cv
150.543 60.898 150.961 61.406 152.309 62.18 cv
153.484 62.848 li
153.98 63.125 154.156 63.344 154.156 63.664 cv
154.156 64.125 153.715 64.426 153.047 64.426 cv
152.746 64.426 152.332 64.348 151.953 64.207 cv
151.652 64.094 151.422 63.977 150.867 63.676 cv
150.258 65.016 li
150.477 65.117 150.648 65.199 150.754 65.246 cv
151.547 65.613 151.801 65.707 152.344 65.777 cv
152.562 65.812 152.793 65.824 153.023 65.824 cv
154.707 65.824 155.699 65.027 155.699 63.664 cv
155.699 63.137 155.504 62.629 155.184 62.305 cv
154.824 61.945 154.062 61.465 152.898 60.84 cv
152.355 60.551 152.172 60.355 152.172 60.031 cv
152.172 59.605 152.609 59.328 153.289 59.328 cv
153.797 59.328 154.453 59.516 155.262 59.871 cv
cp
159.887 58.062 mo
158.434 58.062 li
158.434 65.672 li
159.887 65.672 li
cp
168.152 59.293 mo
168.152 58.062 li
162.133 58.062 li
162.133 59.293 li
164.414 59.293 li
164.414 65.672 li
165.867 65.672 li
165.867 59.293 li
cp
173.852 57.289 mo
173.852 56.93 173.562 56.652 173.219 56.652 cv
172.871 56.652 172.594 56.93 172.594 57.289 cv
172.594 57.633 172.871 57.91 173.219 57.91 cv
173.562 57.91 173.852 57.633 173.852 57.289 cv
171.949 57.254 mo
171.949 56.906 171.672 56.629 171.328 56.629 cv
170.98 56.629 170.691 56.906 170.691 57.254 cv
170.691 57.598 170.98 57.887 171.328 57.887 cv
171.672 57.887 171.949 57.598 171.949 57.254 cv
175.629 65.672 mo
172.871 58.062 li
171.57 58.062 li
168.812 65.672 li
170.336 65.672 li
170.957 63.793 li
173.508 63.793 li
174.105 65.672 li
cp
173.113 62.559 mo
171.352 62.559 li
172.227 59.801 li
cp
182.309 59.293 mo
182.309 58.062 li
176.289 58.062 li
176.289 59.293 li
178.574 59.293 li
178.574 65.672 li
180.027 65.672 li
180.027 59.293 li
cp
194.57 65.672 mo
194.57 64.438 li
190.508 64.438 li
194.57 59.008 li
194.57 58.062 li
188.547 58.062 li
188.547 59.293 li
192.609 59.293 li
188.48 64.727 li
188.48 65.672 li
cp
203.387 62.695 mo
203.387 58.062 li
201.934 58.062 li
201.934 62.777 li
201.934 63.871 201.348 64.473 200.238 64.473 cv
199.027 64.473 198.441 63.906 198.441 62.777 cv
198.441 58.062 li
197 58.062 li
197 62.695 li
197 64.094 197.25 64.727 198.035 65.27 cv
198.613 65.66 199.234 65.824 200.191 65.824 cv
201.141 65.824 201.785 65.648 202.34 65.27 cv
203.133 64.715 203.387 64.094 203.387 62.695 cv
215.488 65.672 mo
215.488 64.438 li
212.371 64.438 li
212.371 58.062 li
210.918 58.062 li
210.918 65.672 li
cp
222.504 57.289 mo
222.504 56.93 222.215 56.652 221.871 56.652 cv
221.523 56.652 221.25 56.93 221.25 57.289 cv
221.25 57.633 221.523 57.91 221.871 57.91 cv
222.215 57.91 222.504 57.633 222.504 57.289 cv
220.152 57.277 mo
220.152 56.93 219.875 56.641 219.52 56.641 cv
219.172 56.641 218.895 56.93 218.895 57.277 cv
218.895 57.621 219.172 57.898 219.52 57.898 cv
219.875 57.898 220.152 57.621 220.152 57.277 cv
223.945 62.695 mo
223.945 58.062 li
222.492 58.062 li
222.492 62.777 li
222.492 63.871 221.906 64.473 220.797 64.473 cv
219.586 64.473 219 63.906 219 62.777 cv
219 58.062 li
217.559 58.062 li
217.559 62.695 li
217.559 64.094 217.812 64.727 218.594 65.27 cv
219.172 65.66 219.793 65.824 220.754 65.824 cv
221.699 65.824 222.344 65.648 222.898 65.27 cv
223.695 64.715 223.945 64.094 223.945 62.695 cv
232.461 63.645 mo
232.461 62.453 231.734 61.703 230.582 61.684 cv
231.18 61.648 231.492 61.508 231.828 61.129 cv
232.105 60.805 232.266 60.355 232.266 59.93 cv
232.266 59.434 232.035 58.891 231.664 58.566 cv
231.25 58.188 230.754 58.062 229.762 58.062 cv
227.004 58.062 li
227.004 65.672 li
230.109 65.672 li
231.629 65.672 232.461 64.957 232.461 63.645 cv
230.648 60.184 mo
230.648 60.828 230.211 61.176 229.395 61.176 cv
228.527 61.176 li
228.527 59.215 li
229.473 59.215 li
230.211 59.215 230.648 59.57 230.648 60.184 cv
230.871 63.48 mo
230.871 63.871 230.672 64.207 230.352 64.367 cv
230.129 64.473 229.922 64.508 229.473 64.508 cv
228.527 64.508 li
228.527 62.41 li
229.473 62.41 li
230.375 62.41 230.871 62.789 230.871 63.48 cv
239.977 65.672 mo
239.977 64.438 li
236.645 64.438 li
236.645 62.41 li
239.25 62.41 li
239.25 61.176 li
236.645 61.176 li
236.645 59.293 li
239.828 59.293 li
239.828 58.062 li
235.191 58.062 li
235.191 65.672 li
cp
248.348 58.648 mo
247.691 58.152 246.93 57.922 245.961 57.922 cv
244.703 57.922 243.852 58.234 243.09 58.984 cv
242.34 59.723 241.922 60.727 241.922 61.832 cv
241.922 63.02 242.398 64.148 243.203 64.875 cv
243.918 65.523 244.773 65.824 245.961 65.824 cv
246.41 65.824 246.812 65.777 247.184 65.695 cv
247.527 65.613 247.727 65.547 248.211 65.328 cv
247.945 64.105 li
247.266 64.367 246.812 64.461 246.273 64.461 cv
244.609 64.461 243.527 63.391 243.527 61.75 cv
243.527 60.309 244.578 59.273 246.039 59.273 cv
246.711 59.273 247.297 59.445 247.793 59.801 cv
cp
256.422 65.672 mo
253.664 61.762 li
256.285 58.062 li
254.613 58.062 li
252.223 61.613 li
252.223 58.062 li
250.77 58.062 li
250.77 65.672 li
252.223 65.672 li
252.223 62.051 li
254.762 65.672 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
